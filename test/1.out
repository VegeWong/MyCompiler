global main

extern puts
extern getchar
extern putchar
extern sprintf
extern __stack_chk_fail
extern malloc
extern printf
extern strlen
extern memcpy
extern scanf
section .data
	dq	1
__staticString__0:
	db	32, 0
	dq	1
__staticString__1:
	db	10, 0
	dq	7
__staticString__2:
	db	84, 111, 116, 97, 108, 58, 32, 0
__global__N:
	dq	0
__global__M:
	dq	0
__global__i:
	dq	0
__global__j:
	dq	0
__global__primeCount:
	dq	0
__global__resultCount:
	dq	0
__global__b:
	dq	0
__global__prime:
	dq	0
__global__gps:
	dq	0
__global__tmp:
	dq	0
__global__result:
	dq	0
intbuffer:
	dq 0
format1:
	db"%lld",0
format2:
	db"%s",0

section .bss
stringbuffer:
	resb 256
section .text
origin:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 144
	mov     qword [rbp-8], rdi
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
	push    r12
	push    r13
	push    r14
	push    r15
origin.__begin__:
	mov     r15, 0
	mov     r15, qword [rbp-8]
	mov     rax, r15
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	call    malloc
	add     rax, 8
	mov     r15, rax
	mov     rax, qword [rbp-8]
	mov     qword [r15-8], rax
	mov     qword [__global__result], r15
	mov     rax, 0
	mov     qword [__global__i], rax
for_cond2:
	mov     rcx, qword [__global__i]
	cmp     rcx, qword [rbp-8]
	jl     for_body2
	jnl     for_end2
for_body2:
	mov     r15, 0
	mov     r15, qword [rbp-8]
	mov     rax, r15
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	call    malloc
	add     rax, 8
	mov     r15, rax
	mov     rax, qword [rbp-8]
	mov     qword [r15-8], rax
	mov	r11, qword [__global__i]
	shl	r11, 3
	add	r11, qword [__global__result]
	mov     qword [r11], r15
	mov     rax, 0
	mov     qword [__global__j], rax
for_cond7:
	mov     rcx, qword [__global__j]
	cmp     rcx, qword [rbp-8]
	jl     for_body7
	jnl     for_end7
for_body7:
	mov     r15, qword [__global__j]
	shl	r15, 3
	mov	r11, qword [__global__i]
	shl	r11, 3
	add	r11, qword [__global__result]
	add     r15, qword [r11]
	mov     rax, 0
	mov     qword [r15], rax
for_step7:
	mov     r15, qword [__global__j]
	mov     rax, qword [__global__j]
	add     rax, 1
	mov     qword [__global__j], rax
	jmp    for_cond7
for_end7:
for_step2:
	mov     r15, qword [__global__i]
	mov     rax, qword [__global__i]
	add     rax, 1
	mov     qword [__global__i], rax
	jmp    for_cond2
for_end2:
	jmp    origin.__end__
origin.__end__:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	leave
	ret
getPrime:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 176
	mov     qword [rbp-8], rdi
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
	push    r12
	push    r13
	push    r14
	push    r15
getPrime.__begin__:
	mov     r14, 2
	mov     r15, 2
for_cond12:
	cmp     r15, qword [rbp-8]
	jle     for_body12
	jnle     for_end12
for_body12:
	mov	r10, r15
	shl	r10, 3
	add	r10, qword [__global__b]
	cmp     qword [r10], 1
	je     if_then15
	jne     if_end15
if_then15:
	mov	rbx, 0
	shl	rbx, 3
	add	rbx, qword [__global__tmp]
	mov     r13, qword [rbx]
	add     r13, 1
	mov	r11, 0
	shl	r11, 3
	add	r11, qword [__global__tmp]
	mov     qword [r11], r13
	mov	rbx, 0
	shl	rbx, 3
	add	rbx, qword [__global__tmp]
	mov     r13, qword [rbx]
	shl	r13, 3
	add     r13, qword [__global__prime]
	mov     qword [r13], r15
	mov	r11, r15
	shl	r11, 3
	add	r11, qword [__global__gps]
	mov	rbx, 0
	shl	rbx, 3
	add	rbx, qword [__global__tmp]
	mov     rax, qword [rbx]
	mov     qword [r11], rax
	jmp    if_end15
if_end15:
while_cond21:
	mov     r13, r15
	imul     r13, r14
	cmp     r13, qword [rbp-8]
	jle     while_body21
	jnle     while_end21
while_body21:
	mov     r13, r15
	imul     r13, r14
	mov	r11, r13
	shl	r11, 3
	add	r11, qword [__global__b]
	mov     rax, 0
	mov     qword [r11], rax
	add     r14, 1
	jmp    while_cond21
while_end21:
	mov     r14, 2
for_step12:
	add     r15, 1
	jmp    for_cond12
for_end12:
	jmp    getPrime.__end__
getPrime.__end__:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	leave
	ret
getResult:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 208
	mov     qword [rbp-8], rdi
	mov     qword [rbp-16], rsi
	mov     qword [rbp-24], rdx
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
	push    r12
	push    r13
	push    r14
	push    r15
getResult.__begin__:
	mov     r15, qword [rbp-24]
	shl	r15, 3
	mov	r11, qword [rbp-16]
	shl	r11, 3
	add	r11, qword [__global__result]
	add     r15, qword [r11]
	cmp     qword [r15], -1
	je     if_then30
	jne     if_end30
if_then30:
	mov	rbx, qword [rbp-24]
	shl	rbx, 3
	add	rbx, qword [__global__prime]
	mov     r15, qword [rbx]
	shl	r15, 1
	mov	r11, qword [rbp-16]
	shl	r11, 3
	add	r11, qword [__global__prime]
	sub     r15, qword [r11]
	cmp     r15, qword [rbp-8]
	jle     if_then32
	jnle     if_end32
if_then32:
	mov	rbx, qword [rbp-24]
	shl	rbx, 3
	add	rbx, qword [__global__prime]
	mov     r15, qword [rbx]
	shl	r15, 1
	mov	r11, qword [rbp-16]
	shl	r11, 3
	add	r11, qword [__global__prime]
	sub     r15, qword [r11]
	mov	r10, r15
	shl	r10, 3
	add	r10, qword [__global__b]
	cmp     qword [r10], 0
	jne     if_then36
	je     if_end36
if_then36:
	mov     r15, qword [rbp-24]
	shl	r15, 3
	mov	r11, qword [rbp-16]
	shl	r11, 3
	add	r11, qword [__global__result]
	add     r15, qword [r11]
	mov	rbx, qword [rbp-24]
	shl	rbx, 3
	add	rbx, qword [__global__prime]
	mov     r14, qword [rbx]
	shl	r14, 1
	mov	r11, qword [rbp-16]
	shl	r11, 3
	add	r11, qword [__global__prime]
	sub     r14, qword [r11]
	mov	rbx, r14
	shl	rbx, 3
	add	rbx, qword [__global__gps]
	mov     rdx, qword [rbx]
	mov     rsi, qword [rbp-24]
	mov     rdi, qword [rbp-8]
	call    getResult
	mov     r14, rax
	add     r14, 1
	mov     qword [r15], r14
	jmp    if_end36
if_end36:
	jmp    if_end32
if_end32:
	jmp    if_end30
if_end30:
	mov     r15, qword [rbp-24]
	shl	r15, 3
	mov	r11, qword [rbp-16]
	shl	r11, 3
	add	r11, qword [__global__result]
	add     r15, qword [r11]
	cmp     qword [r15], -1
	je     if_then44
	jne     if_end44
if_then44:
	mov     r15, qword [rbp-24]
	shl	r15, 3
	mov	r11, qword [rbp-16]
	shl	r11, 3
	add	r11, qword [__global__result]
	add     r15, qword [r11]
	mov     rax, 1
	mov     qword [r15], rax
	jmp    if_end44
if_end44:
	mov     r15, qword [rbp-24]
	shl	r15, 3
	mov	r11, qword [rbp-16]
	shl	r11, 3
	add	r11, qword [__global__result]
	add     r15, qword [r11]
	mov     rax, qword [r15]
	jmp    getResult.__end__
	jmp    getResult.__end__
getResult.__end__:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	leave
	ret
printF:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 168
	mov     qword [rbp-8], rdi
	mov     qword [rbp-16], rsi
	mov     qword [rbp-24], rdx
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
	push    r12
	push    r13
	push    r14
	push    r15
printF.__begin__:
	mov     rdi, qword [rbp-8]
	call    toString
	mov     r15, rax
	mov     rdi, r15
	call    print
	mov     r15, rax
while_cond47:
	cmp     qword [rbp-24], 0
	jg     while_body47
	jng     while_end47
while_body47:
	mov     rdi, __staticString__0
	call    print
	mov     r15, rax
	mov     rdi, qword [rbp-16]
	call    toString
	mov     r15, rax
	mov     rdi, r15
	call    print
	mov     r15, rax
	mov     r15, qword [rbp-16]
	shl	r15, 1
	sub     r15, qword [rbp-8]
	mov     qword [rbp-16], r15
	mov     r15, qword [rbp-8]
	add     r15, qword [rbp-16]
	shr	r15, 1
	mov     qword [rbp-8], r15
	mov     r15, qword [rbp-24]
	sub     r15, 1
	mov     qword [rbp-24], r15
	jmp    while_cond47
while_end47:
	mov     rdi, __staticString__1
	call    print
	mov     r15, rax
	jmp    printF.__end__
printF.__end__:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	leave
	ret
main:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 656
main.__begin__:
	mov     r15, 0
	mov     r15, 1001
	mov     rax, r15
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	call    malloc
	add     rax, 8
	mov     r15, rax
	mov     rax, 1001
	mov     qword [r15-8], rax
	mov     qword [__global__b], r15
	mov     r15, 0
	mov     r15, 170
	mov     rax, r15
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	call    malloc
	add     rax, 8
	mov     r15, rax
	mov     rax, 170
	mov     qword [r15-8], rax
	mov     qword [__global__prime], r15
	mov     r15, 0
	mov     r15, 1001
	mov     rax, r15
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	call    malloc
	add     rax, 8
	mov     r15, rax
	mov     rax, 1001
	mov     qword [r15-8], rax
	mov     qword [__global__gps], r15
	mov     r15, 0
	mov     r15, 1
	mov     rax, r15
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	call    malloc
	add     rax, 8
	mov     r15, rax
	mov     rax, 1
	mov     qword [r15-8], rax
	mov     qword [__global__tmp], r15
	mov     rdi, 170
	call    origin
	mov     r15, rax
	mov     rax, 1000
	mov     qword [__global__N], rax
	call    getInt
	mov     r15, rax
	mov     qword [__global__M], r15
	mov     rax, 0
	mov     qword [__global__primeCount], rax
	mov     rax, 0
	mov     qword [__global__resultCount], rax
	mov	r11, 0
	shl	r11, 3
	add	r11, qword [__global__tmp]
	mov     rax, 0
	mov     qword [r11], rax
	mov     rax, 0
	mov     qword [__global__i], rax
for_cond69:
	mov     r15, qword [__global__N]
	add     r15, 1
	cmp     qword [__global__i], r15
	jl     for_body69
	jnl     for_end69
for_body69:
	mov	r11, qword [__global__i]
	shl	r11, 3
	add	r11, qword [__global__b]
	mov     rax, 1
	mov     qword [r11], rax
	mov	r11, qword [__global__i]
	shl	r11, 3
	add	r11, qword [__global__gps]
	mov     rax, 0
	mov     qword [r11], rax
for_step69:
	mov     r15, qword [__global__i]
	add     r15, 1
	mov     qword [__global__i], r15
	jmp    for_cond69
for_end69:
	mov     rax, 0
	mov     qword [__global__i], rax
for_cond77:
	mov     r15, qword [__global__M]
	add     r15, 1
	cmp     qword [__global__i], r15
	jl     for_body77
	jnl     for_end77
for_body77:
	mov	r11, qword [__global__i]
	shl	r11, 3
	add	r11, qword [__global__prime]
	mov     rax, 0
	mov     qword [r11], rax
for_step77:
	mov     r15, qword [__global__i]
	add     r15, 1
	mov     qword [__global__i], r15
	jmp    for_cond77
for_end77:
	mov     rax, 0
	mov     qword [__global__i], rax
for_cond84:
	mov     rcx, qword [__global__i]
	cmp     rcx, qword [__global__M]
	jle     for_body84
	jnle     for_end84
for_body84:
	mov     rax, 0
	mov     qword [__global__j], rax
for_cond87:
	mov     rcx, qword [__global__j]
	cmp     rcx, qword [__global__M]
	jle     for_body87
	jnle     for_end87
for_body87:
	mov     r15, qword [__global__j]
	shl	r15, 3
	mov	r11, qword [__global__i]
	shl	r11, 3
	add	r11, qword [__global__result]
	add     r15, qword [r11]
	mov     rax, -1
	mov     qword [r15], rax
for_step87:
	mov     r15, qword [__global__j]
	add     r15, 1
	mov     qword [__global__j], r15
	jmp    for_cond87
for_end87:
for_step84:
	mov     r15, qword [__global__i]
	add     r15, 1
	mov     qword [__global__i], r15
	jmp    for_cond84
for_end84:
	mov     rdi, qword [__global__N]
	call    getPrime
	mov     r15, rax
	mov	rbx, 0
	shl	rbx, 3
	add	rbx, qword [__global__tmp]
	mov     rax, qword [rbx]
	mov     qword [__global__primeCount], rax
	mov     rax, 1
	mov     qword [__global__i], rax
for_cond96:
	mov     rcx, qword [__global__i]
	cmp     rcx, qword [__global__primeCount]
	jl     for_body96
	jnl     for_end96
for_body96:
	mov     r15, qword [__global__i]
	add     r15, 1
	mov     qword [__global__j], r15
for_cond99:
	mov     rcx, qword [__global__j]
	cmp     rcx, qword [__global__primeCount]
	jle     for_body99
	jnle     for_end99
for_body99:
	mov     r15, qword [__global__j]
	shl	r15, 3
	mov	r11, qword [__global__i]
	shl	r11, 3
	add	r11, qword [__global__result]
	add     r15, qword [r11]
	cmp     qword [r15], -1
	je     if_then103
	jne     if_end103
if_then103:
	mov     r14, qword [__global__j]
	shl	r14, 3
	mov	r11, qword [__global__i]
	shl	r11, 3
	add	r11, qword [__global__result]
	add     r14, qword [r11]
	mov     rdx, qword [__global__j]
	mov     rsi, qword [__global__i]
	mov     rdi, qword [__global__N]
	call    getResult
	mov     r15, rax
	mov     qword [r14], r15
	mov     r15, qword [__global__j]
	shl	r15, 3
	mov	r11, qword [__global__i]
	shl	r11, 3
	add	r11, qword [__global__result]
	add     r15, qword [r11]
	cmp     qword [r15], 1
	jg     if_then106
	jng     if_end106
if_then106:
	mov     r15, qword [__global__j]
	shl	r15, 3
	mov	r11, qword [__global__i]
	shl	r11, 3
	add	r11, qword [__global__result]
	add     r15, qword [r11]
	mov     rdx, qword [r15]
	mov	rbx, qword [__global__j]
	shl	rbx, 3
	add	rbx, qword [__global__prime]
	mov     rsi, qword [rbx]
	mov	rbx, qword [__global__i]
	shl	rbx, 3
	add	rbx, qword [__global__prime]
	mov     rdi, qword [rbx]
	call    printF
	mov     r15, rax
	mov     r15, qword [__global__resultCount]
	add     r15, 1
	mov     qword [__global__resultCount], r15
	jmp    if_end106
if_end106:
	jmp    if_end103
if_end103:
for_step99:
	mov     r15, qword [__global__j]
	add     r15, 1
	mov     qword [__global__j], r15
	jmp    for_cond99
for_end99:
for_step96:
	mov     r15, qword [__global__i]
	add     r15, 1
	mov     qword [__global__i], r15
	jmp    for_cond96
for_end96:
	mov     rdi, __staticString__2
	call    print
	mov     r15, rax
	mov     rdi, qword [__global__resultCount]
	call    toString
	mov     r15, rax
	mov     rdi, r15
	call    println
	mov     r15, rax
	mov     rax, 0
	jmp    main.__end__
	jmp    main.__end__
main.__end__:
	leave
	ret
toString:
	push     rbp
	mov      rbp,rsp
	mov      rdx,rdi
	mov      rax,0
	mov      rdi,stringbuffer
	mov      rsi,format1
	call     sprintf
	mov      rdi,stringbuffer
	call     transtring
	mov      rsp,rbp
	pop      rbp
	ret
println:
	call puts
	ret

array.size:
	mov	rax, qword [rdi - 8]
	ret

string.add:
	push rbp
	mov rbp,rsp
	push rsi
	mov rsi,rdi
	mov rdi,stringbuffer
	mov rdx,[rsi-8]
	push rdx
	call memcpy
	pop rdi
	pop rsi
	add rdi,stringbuffer
	mov rdx,[rsi-8]
	add rdx,1
	call memcpy
	mov rdi,stringbuffer
	call transtring
	mov rsp,rbp
	pop rbp
	ret
getInt:
	push rbp
	mov rbp,rsp
	mov rax,0
	mov rdi,format1
	mov rsi,intbuffer
	call scanf
	mov rax,[intbuffer]
	mov rsp,rbp
	pop rbp
	ret
string.length:
	push    rbp
	mov     rbp, rsp
	mov     qword [rbp-18H], rdi
	mov     dword [rbp-4H], 0
	jmp     Llen_002
Llen_001:  add     dword [rbp-4H], 1
Llen_002:  mov     eax, dword [rbp-4H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jnz     Llen_001
	mov     eax, dword [rbp-4H]
	pop     rbp
	ret
string.ord:
	push    rbp
	mov     rbp, rsp
	mov     qword [rbp-18H], rdi
	mov     dword [rbp-1CH], esi
	mov     eax, dword [rbp-1CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	movsx   eax, al
	mov     dword [rbp-4H], eax
	mov     eax, dword [rbp-4H]
	pop     rbp
	ret
print:
	push rbp
	mov rbp,rsp
	mov rax,0
	mov rsi,rdi
	mov rdi,format2
	call printf
	mov rsp,rbp
	pop rbp
	ret
transtring:

	push rbp
	mov rbp,rsp
	call strlen
	push rdi
	mov rdi,rax
	push rdi
	add rdi,9
	call malloc
	pop rdi
	mov [rax],rdi
	add rax,8
	mov rdx,rdi
	add rdx,1
	mov rdi,rax
	pop rsi
	sub rsp,8
	push rax
	call memcpy
	pop rax
	mov rsp,rbp
	pop rbp
	ret

getString:

	push rbp
	mov rbp,rsp
	mov rax,0
	mov rdi,format2
	mov rsi,stringbuffer
	call scanf
	mov rdi,stringbuffer
	call transtring
	mov rsp,rbp
	pop rbp
	ret

string.substring:
	push rbp
	mov rbp,rsp
	push rdi
	push rsi
	mov rdi,rdx
	sub rdi,rsi
	add rdi,1
	push rdi
	add rdi,9
	call malloc
	pop rdx
	mov [rax],rdx
	add rax,8
	pop rsi
	pop rdi
	add rsi,rdi
	mov rdi,rax
	push rdx
	push rax
	call memcpy
	pop rax
	pop rdx
	mov qword[rax+rdx],0
	mov rsp,rbp
	pop rbp
	ret

string.parseInt:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 32
	mov     qword [rbp-18H], rdi
	mov     edi, 256
	call    malloc
	mov     qword [rbp-8H], rax
	mov     dword [rbp-10H], 0
	mov     dword [rbp-0CH], 0
	jmp     Lpar_002
Lpar_001:  add     dword [rbp-10H], 1
Lpar_002:  mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Lpar_004
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Lpar_001
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Lpar_001
	jmp     Lpar_004
Lpar_003:  mov     edx, dword [rbp-0CH]
	mov     eax, edx
	shl     eax, 2
	add     eax, edx
	add     eax, eax
	mov     ecx, eax
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	movsx   eax, al
	add     eax, ecx
	sub     eax, 48
	mov     dword [rbp-0CH], eax
	add     dword [rbp-10H], 1
Lpar_004:  mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 47
	jle     Lpar_005
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jle     Lpar_003
Lpar_005:  mov     eax, dword [rbp-0CH]
	leave
	ret
	string.eq:
	push    rbp
	mov     rbp, rsp
	mov     qword [rbp-18H], rdi
	mov     qword [rbp-20H], rsi
	mov     dword [rbp-0CH], 0
	mov     dword [rbp-8H], 0
	jmp     Leq_002
Leq_001:  add     dword [rbp-0CH], 1
Leq_002:  mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Leq_004
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Leq_001
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Leq_001
	jmp     Leq_004
Leq_003:  add     dword [rbp-8H], 1
Leq_004:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Leq_005
	mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Leq_003
	mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Leq_003
Leq_005:  mov     eax, dword [rbp-0CH]
	cmp     eax, dword [rbp-8H]
	jz      Leq_006
	mov     eax, 0
	jmp     Leq_010
Leq_006:  mov     dword [rbp-4H], 0
	mov     dword [rbp-4H], 0
	jmp     Leq_009
Leq_007:  mov     eax, dword [rbp-4H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-4H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jz      Leq_008
	mov     eax, 0
	jmp     Leq_010
Leq_008:  add     dword [rbp-4H], 1
Leq_009:  mov     eax, dword [rbp-4H]
	cmp     eax, dword [rbp-0CH]
	jl      Leq_007
	mov     eax, 1
Leq_010:  pop     rbp
	ret
string.lt:
	push    rbp
	mov     rbp, rsp
	mov     qword [rbp-18H], rdi
	mov     qword [rbp-20H], rsi
	mov     dword [rbp-10H], 0
	mov     dword [rbp-0CH], 0
	jmp     Ll_012
Ll_011:  add     dword [rbp-10H], 1
Ll_012:  mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Ll_014
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Ll_011
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Ll_011
	jmp     Ll_014
Ll_013:  add     dword [rbp-0CH], 1
Ll_014:  mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Ll_015
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Ll_013
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Ll_013
Ll_015:  mov     eax, dword [rbp-0CH]
	cmp     dword [rbp-10H], eax
	cmovle  eax, dword [rbp-10H]
	mov     dword [rbp-4H], eax
	mov     dword [rbp-8H], 0
	mov     dword [rbp-8H], 0
	jmp     Ll_019
Ll_016:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-8H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jge     Ll_017
	mov     eax, 1
	jmp     Ll_021
Ll_017:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-8H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jle     Ll_018
	mov     eax, 0
	jmp     Ll_021
Ll_018:  add     dword [rbp-8H], 1
Ll_019:  mov     eax, dword [rbp-8H]
	cmp     eax, dword [rbp-4H]
	jl      Ll_016
	mov     eax, dword [rbp-10H]
	cmp     eax, dword [rbp-0CH]
	jl      Ll_020
	mov     eax, 0
	jmp     Ll_021
Ll_020:  mov     eax, 1
Ll_021:  pop     rbp
	ret
string.gt:
	push    rbp
	mov     rbp, rsp
	mov     qword [rbp-18H], rdi
	mov     qword [rbp-20H], rsi
	mov     dword [rbp-10H], 0
	mov     dword [rbp-0CH], 0
	jmp     Lg_023
Lg_022:  add     dword [rbp-10H], 1
Lg_023:  mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Lg_025
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Lg_022
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Lg_022
	jmp     Lg_025
Lg_024:  add     dword [rbp-0CH], 1
Lg_025:  mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Lg_026
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Lg_024
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Lg_024
Lg_026:  mov     eax, dword [rbp-0CH]
	cmp     dword [rbp-10H], eax
	cmovle  eax, dword [rbp-10H]
	mov     dword [rbp-4H], eax
	mov     dword [rbp-8H], 0
	mov     dword [rbp-8H], 0
	jmp     Lg_030
Lg_027:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-8H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jle     Lg_028
	mov     eax, 1
	jmp     Lg_032
Lg_028:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-8H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jge     Lg_029
	mov     eax, 0
	jmp     Lg_032
Lg_029:  add     dword [rbp-8H], 1
Lg_030:  mov     eax, dword [rbp-8H]
	cmp     eax, dword [rbp-4H]
	jl      Lg_027
	mov     eax, dword [rbp-10H]
	cmp     eax, dword [rbp-0CH]
	jg      Lg_031
	mov     eax, 0
	jmp     Lg_032
Lg_031:  mov     eax, 1
Lg_032:  pop     rbp
	ret
	string.le:
	push    rbp
	mov     rbp, rsp
	mov     qword [rbp-18H], rdi
	mov     qword [rbp-20H], rsi
	mov     dword [rbp-10H], 0
	mov     dword [rbp-0CH], 0
	jmp     Llege_002
Llege_001:  add     dword [rbp-10H], 1
Llege_002:  mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Llege_004
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Llege_001
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Llege_001
	jmp     Llege_004
Llege_003:  add     dword [rbp-0CH], 1
Llege_004:  mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Llege_005
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Llege_003
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Llege_003
Llege_005:  mov     eax, dword [rbp-0CH]
	cmp     dword [rbp-10H], eax
	cmovle  eax, dword [rbp-10H]
	mov     dword [rbp-4H], eax
	mov     dword [rbp-8H], 0
	mov     dword [rbp-8H], 0
	jmp     Llege_009
Llege_006:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-8H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jge     Llege_007
	mov     eax, 1
	jmp     Llege_011
Llege_007:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-8H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jle     Llege_008
	mov     eax, 0
	jmp     Llege_011
Llege_008:  add     dword [rbp-8H], 1
Llege_009:  mov     eax, dword [rbp-8H]
	cmp     eax, dword [rbp-4H]
	jl      Llege_006
	mov     eax, dword [rbp-10H]
	cmp     eax, dword [rbp-0CH]
	jle     Llege_010
	mov     eax, 0
	jmp     Llege_011
	Llege_010:  mov     eax, 1
	Llege_011:  pop     rbp
	ret
	string.ge:
	push    rbp
	mov     rbp, rsp
	mov     qword [rbp-18H], rdi
	mov     qword [rbp-20H], rsi
	mov     dword [rbp-10H], 0
	mov     dword [rbp-0CH], 0
	jmp     Llege_013
Llege_012:  add     dword [rbp-10H], 1
Llege_013:  mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Llege_015
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Llege_012
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Llege_012
	jmp     Llege_015
Llege_014:  add     dword [rbp-0CH], 1
Llege_015:  mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Llege_016
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Llege_014
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Llege_014
Llege_016:  mov     eax, dword [rbp-0CH]
	cmp     dword [rbp-10H], eax
	cmovle  eax, dword [rbp-10H]
	mov     dword [rbp-4H], eax
	mov     dword [rbp-8H], 0
	mov     dword [rbp-8H], 0
	jmp     Llege_020
Llege_017:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-8H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jle     Llege_018
	mov     eax, 1
	jmp     Llege_022
Llege_018:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-8H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jge     Llege_019
	mov     eax, 0
	jmp     Llege_022
Llege_019:  add     dword [rbp-8H], 1
Llege_020:  mov     eax, dword [rbp-8H]
	cmp     eax, dword [rbp-4H]
	jl      Llege_017
	mov     eax, dword [rbp-10H]
	cmp     eax, dword [rbp-0CH]
	jge     Llege_021
	mov     eax, 0
	jmp     Llege_022
Llege_021:  mov     eax, 1
Llege_022:  pop     rbp
	ret
