global main

extern puts
extern getchar
extern putchar
extern sprintf
extern __stack_chk_fail
extern malloc
extern printf
extern strlen
extern memcpy
extern scanf
section .data
	dq	0
__staticString__0:
	db	0
	dq	1
__staticString__3:
	db	32, 0
	dq	95
__staticString__2:
	db	32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 0
	dq	17
__staticString__1:
	db	65, 115, 115, 101, 114, 116, 105, 111, 110, 32, 70, 97, 105, 108, 101, 100, 33, 0
__global__asciiTable:
	dq	0
intbuffer:
	dq 0
format1:
	db"%lld",0
format2:
	db"%s",0

section .bss
stringbuffer:
	resb 256
section .text
hilo:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 40
	mov     qword [rbp-8], rdi
	mov     qword [rbp-16], rsi
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
hilo.__begin__:
	mov     r12, qword [rbp-8]
	shl	r12, 16
	mov     r14, qword [rbp-16]
	or     r14, r12
	mov     rax, r14
	jmp    hilo.__end__
	jmp    hilo.__end__
hilo.__end__:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	leave
	ret
shift_l:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 56
	mov     qword [rbp-8], rdi
	mov     qword [rbp-16], rsi
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
shift_l.__begin__:
	mov     rbx, qword [rbp-8]
	mov     rax, qword [rbp-16]
	mov     ecx, eax
	shl     rbx, cl
	mov     rsi, 65535
	mov     rdi, 65535
	call    hilo
	mov     r14, rax
	and     rbx, r14
	mov     rax, rbx
	jmp    shift_l.__end__
	jmp    shift_l.__end__
shift_l.__end__:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	leave
	ret
shift_r:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 128
	mov     qword [rbp-8], rdi
	mov     qword [rbp-16], rsi
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
shift_r.__begin__:
	mov     rax, -32769
	mov     rsi, 65535
	mov     rdi, 32767
	call    hilo
	mov     r13, rax
	mov     rbx, r13
	mov     r13, rbx
	mov     rax, qword [rbp-16]
	mov     ecx, eax
	shr     r13, cl
	shl	r13, 1
	add     r13, 1
	mov     rbx, r13
	mov     r13, qword [rbp-8]
	mov     rax, qword [rbp-16]
	mov     ecx, eax
	shr     r13, cl
	and     rbx, r13
	mov     rsi, 65535
	mov     rdi, 65535
	call    hilo
	mov     r13, rax
	and     rbx, r13
	mov     rax, rbx
	jmp    shift_r.__end__
	jmp    shift_r.__end__
shift_r.__end__:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	leave
	ret
xorshift:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 120
	mov     qword [rbp-8], rdi
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
xorshift.__begin__:
	mov     r12, qword [rbp-8]
	mov     rsi, 13
	mov     rdi, r12
	call    shift_l
	mov     r13, rax
	xor     r12, r13
	mov     rsi, 17
	mov     rdi, r12
	call    shift_r
	mov     r13, rax
	xor     r12, r13
	mov     rsi, 5
	mov     rdi, r12
	call    shift_l
	mov     r13, rax
	xor     r12, r13
	mov     rax, r12
	jmp    xorshift.__end__
	jmp    xorshift.__end__
xorshift.__end__:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	leave
	ret
xorshift10:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 200
	mov     qword [rbp-8], rdi
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
xorshift10.__begin__:
	mov     r15, qword [rbp-8]
	mov     rdi, r15
	call    xorshift
	mov     r15, rax
	mov     rdi, r15
	call    xorshift
	mov     r15, rax
	mov     rdi, r15
	call    xorshift
	mov     r15, rax
	mov     rdi, r15
	call    xorshift
	mov     r15, rax
	mov     rdi, r15
	call    xorshift
	mov     r15, rax
	mov     rdi, r15
	call    xorshift
	mov     r15, rax
	mov     rdi, r15
	call    xorshift
	mov     r15, rax
	mov     rdi, r15
	call    xorshift
	mov     r15, rax
	mov     rdi, r15
	call    xorshift
	mov     r15, rax
	mov     rdi, r15
	call    xorshift
	mov     r15, rax
	mov     rax, r15
	jmp    xorshift10.__end__
	jmp    xorshift10.__end__
xorshift10.__end__:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	leave
	ret
int2chr:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 64
	mov     qword [rbp-8], rdi
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
int2chr.__begin__:
	cmp     qword [rbp-8], 32
	jge     rhs__begin__32
	jl     if_end31
rhs__begin__32:
	cmp     qword [rbp-8], 126
	jle     if_then31
	jnle     if_end31
if_then31:
	mov     r14, qword [rbp-8]
	sub     r14, 32
	mov     rbx, qword [rbp-8]
	sub     rbx, 32
	mov     rdx, rbx
	mov     rsi, r14
	mov     rdi, qword [__global__asciiTable]
	call    string.substring
	mov     rbx, rax
	mov     rax, rbx
	jmp    int2chr.__end__
	jmp    if_end31
if_end31:
	mov     rax, __staticString__0
	jmp    int2chr.__end__
	jmp    int2chr.__end__
int2chr.__end__:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	leave
	ret
toStringHex:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 192
	mov     qword [rbp-8], rdi
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
toStringHex.__begin__:
	mov     r15, __staticString__0
	mov     r14, 28
for_cond38:
	cmp     r14, 0
	jge     for_body38
	jl     for_end38
for_body38:
	mov     rbx, qword [rbp-8]
	mov     rax, r14
	mov     ecx, eax
	shr     rbx, cl
	and     rbx, 15
	mov     r13, rbx
	cmp     r13, 10
	jl     if_then44
	jnl     if_else44
if_then44:
	mov     rbx, 48
	add     rbx, r13
	mov     rdi, rbx
	call    int2chr
	mov     rbx, rax
	mov     rdi, r15
	mov     rsi, rbx
	call    string.add
	mov     r15, rax
	jmp    if_end44
if_else44:
	mov     rbx, 65
	add     rbx, r13
	sub     rbx, 10
	mov     rdi, rbx
	call    int2chr
	mov     rbx, rax
	mov     rdi, r15
	mov     rsi, rbx
	call    string.add
	mov     r15, rax
if_end44:
for_step38:
	sub     r14, 4
	jmp    for_cond38
for_end38:
	mov     rax, r15
	jmp    toStringHex.__end__
	jmp    toStringHex.__end__
toStringHex.__end__:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	leave
	ret
assert:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 40
	mov     qword [rbp-8], rdi
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
assert.__begin__:
	cmp     qword [rbp-8], 0
	jne     if_end55
	je     if_then55
if_then55:
	mov     rdi, __staticString__1
	call    println
	mov     r13, rax
	jmp    if_end55
if_end55:
	jmp    assert.__end__
assert.__end__:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	leave
	ret
main:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 2448
main.__begin__:
	mov     rax, qword __staticString__2
	mov     qword [__global__asciiTable], rax
	call    getInt
	mov     r13, rax
	mov     qword [rbp-24], r13
	call    getInt
	mov     r13, rax
	call    getInt
	mov     rbx, rax
	mov     qword [rbp-80], rbx
	call    getInt
	mov     rbx, rax
	mov     qword [rbp-104], rbx
	mov     rbx, qword [rbp-24]
	add     rbx, 1
	mov     rdi, rbx
	call    xorshift10
	mov     rbx, rax
	mov     qword [rbp-24], rbx
	mov     rax, -32769
	mov     rsi, 65535
	mov     rdi, 32767
	call    hilo
	mov     rbx, rax
	mov     qword [rbp-160], rbx
	mov     rax, 0
	mov     qword [rbp-192], rax
	mov     rax, 0
	mov     qword [rbp-208], rax
	mov     rax, 0
	mov     qword [rbp-224], rax
	mov     rax, 0
	mov     qword [rbp-240], rax
	mov     rbx, 0
	mov     qword [rbp-272], r13
for_cond69:
	mov     rcx, qword [rbp-272]
	cmp     rcx, qword [rbp-80]
	jl     for_body69
	jnl     for_end69
for_body69:
	mov     rdi, qword [rbp-24]
	call    xorshift
	mov     r13, rax
	mov     qword [rbp-24], r13
	mov     r13, qword [rbp-24]
	and     r13, qword [rbp-160]
	mov     qword [rbp-320], r13
	mov     rdi, qword [rbp-24]
	call    xorshift
	mov     r13, rax
	mov     qword [rbp-24], r13
	mov     r13, qword [rbp-24]
	and     r13, qword [rbp-160]
	mov     qword [rbp-360], r13
	mov     rdi, qword [rbp-24]
	call    xorshift
	mov     r13, rax
	mov     qword [rbp-24], r13
	mov     r13, qword [rbp-24]
	and     r13, qword [rbp-160]
	mov     qword [rbp-400], r13
	mov     rdi, qword [rbp-24]
	call    xorshift
	mov     r13, rax
	mov     qword [rbp-24], r13
	mov     r13, qword [rbp-24]
	and     r13, qword [rbp-160]
	mov     qword [rbp-440], r13
	mov     rdi, qword [rbp-24]
	call    xorshift
	mov     r13, rax
	mov     qword [rbp-24], r13
	mov     r13, qword [rbp-24]
	and     r13, qword [rbp-160]
	mov     qword [rbp-480], r13
	mov     rdi, qword [rbp-24]
	call    xorshift
	mov     r13, rax
	mov     qword [rbp-24], r13
	mov     r13, qword [rbp-24]
	and     r13, qword [rbp-160]
	mov     qword [rbp-520], r13
	mov     r13, qword [rbp-320]
	xor     r13, qword [rbp-360]
	xor     r13, qword [rbp-400]
	mov     r14, r13
	mov     r13, qword [rbp-440]
	xor     r13, qword [rbp-480]
	xor     r13, qword [rbp-520]
	mov     rbx, r14
	xor     rbx, r13
	mov     r14, rbx
	mov     r13, r14
	and     r13, qword [rbp-160]
	mov     r14, r13
	mov     r13, qword [rbp-320]
	add     r13, qword [rbp-360]
	add     r13, qword [rbp-400]
	add     r13, 1
	mov     rbx, r13
	mov     r13, qword [rbp-440]
	add     r13, qword [rbp-480]
	add     r13, qword [rbp-520]
	sub     rbx, r13
	mov     r13, rbx
	and     r13, qword [rbp-160]
	mov     rbx, r13
	mov     r13, qword [rbp-320]
	mov     rax, r13
	cqo
	idiv     qword [rbp-104]
	mov     r13, rdx
	mov     r12, qword [rbp-360]
	mov     rax, r12
	cqo
	idiv     qword [rbp-104]
	mov     r12, rdx
	imul     r13, r12
	mov     r12, qword [rbp-400]
	mov     rax, r12
	cqo
	idiv     qword [rbp-104]
	mov     r12, rdx
	imul     r13, r12
	mov     r12, qword [rbp-440]
	mov     rax, r12
	cqo
	idiv     qword [rbp-104]
	mov     r12, rdx
	imul     r13, r12
	mov     r12, qword [rbp-480]
	mov     rax, r12
	cqo
	idiv     qword [rbp-104]
	mov     r12, rdx
	imul     r13, r12
	mov     r12, qword [rbp-520]
	mov     rax, r12
	cqo
	idiv     qword [rbp-104]
	mov     r12, rdx
	imul     r13, r12
	and     r13, qword [rbp-160]
	mov     r12, qword [rbp-320]
	xor     r12, qword [rbp-360]
	xor     r12, qword [rbp-400]
	mov     r15, qword [rbp-440]
	xor     r15, qword [rbp-480]
	xor     r15, qword [rbp-520]
	cmp     r12, r15
	jg     if_then124
	jng     if_else124
if_then124:
	mov     r12, qword [rbp-320]
	add     r12, qword [rbp-360]
	and     r12, qword [rbp-160]
	mov     rax, r12
	cqo
	idiv     qword [rbp-104]
	mov     r12, rdx
	mov     r15, qword [rbp-400]
	mov     rax, r15
	cqo
	idiv     qword [rbp-104]
	mov     r15, rdx
	add     r15, 1
	mov     rax, r12
	cqo
	idiv     r15
	mov     r12, rdx
	jmp    if_end124
if_else124:
	mov     r12, qword [rbp-400]
	add     r12, qword [rbp-360]
	and     r12, qword [rbp-160]
	mov     rax, r12
	cqo
	idiv     qword [rbp-104]
	mov     r12, rdx
	mov     r15, qword [rbp-320]
	mov     rax, r15
	cqo
	idiv     qword [rbp-104]
	mov     r15, rdx
	add     r15, 1
	mov     rax, r12
	cqo
	idiv     r15
	mov     r12, rdx
if_end124:
	xor     r14, 10001
	mov     rdi, r14
	call    xorshift10
	mov     r14, rax
	mov     r15, qword [rbp-192]
	add     r15, r14
	mov     qword [rbp-192], r15
	xor     rbx, 10002
	mov     rdi, rbx
	call    xorshift10
	mov     rbx, rax
	mov     r14, qword [rbp-208]
	add     r14, rbx
	mov     qword [rbp-208], r14
	xor     r13, 10003
	mov     rdi, r13
	call    xorshift10
	mov     r13, rax
	mov     rbx, qword [rbp-224]
	add     rbx, r13
	mov     qword [rbp-224], rbx
	mov     r13, r12
	xor     r13, 10004
	mov     rdi, r13
	call    xorshift10
	mov     r13, rax
	mov     rbx, qword [rbp-240]
	add     rbx, r13
	mov     qword [rbp-240], rbx
	mov     r13, qword [rbp-440]
	xor     r13, qword [rbp-360]
	xor     r13, qword [rbp-400]
	mov     r14, r13
	mov     r13, r14
	xor     r13, qword [rbp-320]
	xor     r13, qword [rbp-520]
	xor     r13, qword [rbp-480]
	mov     r14, r13
	mov     r13, r14
	and     r13, qword [rbp-160]
	mov     r14, r13
	mov     r13, qword [rbp-440]
	not     r13
	inc     r13
	add     r13, qword [rbp-360]
	add     r13, qword [rbp-400]
	mov     rbx, r13
	mov     r13, rbx
	add     r13, qword [rbp-320]
	sub     r13, qword [rbp-520]
	sub     r13, qword [rbp-480]
	add     r13, 1
	mov     rbx, r13
	mov     r13, rbx
	and     r13, qword [rbp-160]
	mov     rbx, r13
	mov     r13, qword [rbp-440]
	mov     rax, r13
	cqo
	idiv     qword [rbp-104]
	mov     r13, rdx
	mov     r12, qword [rbp-360]
	mov     rax, r12
	cqo
	idiv     qword [rbp-104]
	mov     r12, rdx
	imul     r13, r12
	mov     r12, qword [rbp-400]
	mov     rax, r12
	cqo
	idiv     qword [rbp-104]
	mov     r12, rdx
	imul     r13, r12
	mov     r12, qword [rbp-320]
	mov     rax, r12
	cqo
	idiv     qword [rbp-104]
	mov     r12, rdx
	imul     r13, r12
	mov     r12, qword [rbp-520]
	mov     rax, r12
	cqo
	idiv     qword [rbp-104]
	mov     r12, rdx
	imul     r13, r12
	mov     r12, qword [rbp-480]
	mov     rax, r12
	cqo
	idiv     qword [rbp-104]
	mov     r12, rdx
	imul     r13, r12
	and     r13, qword [rbp-160]
	mov     r12, qword [rbp-320]
	xor     r12, qword [rbp-360]
	xor     r12, qword [rbp-400]
	mov     r15, qword [rbp-440]
	xor     r15, qword [rbp-480]
	xor     r15, qword [rbp-520]
	cmp     r12, r15
	jle     if_then190
	jnle     if_else190
if_then190:
	mov     r12, qword [rbp-400]
	add     r12, qword [rbp-360]
	and     r12, qword [rbp-160]
	mov     rax, r12
	cqo
	idiv     qword [rbp-104]
	mov     r12, rdx
	mov     r15, qword [rbp-320]
	mov     rax, r15
	cqo
	idiv     qword [rbp-104]
	mov     r15, rdx
	add     r15, 1
	mov     rax, r12
	cqo
	idiv     r15
	mov     r12, rdx
	jmp    if_end190
if_else190:
	mov     r12, qword [rbp-320]
	add     r12, qword [rbp-360]
	and     r12, qword [rbp-160]
	mov     rax, r12
	cqo
	idiv     qword [rbp-104]
	mov     r12, rdx
	mov     r15, qword [rbp-400]
	mov     rax, r15
	cqo
	idiv     qword [rbp-104]
	mov     r15, rdx
	add     r15, 1
	mov     rax, r12
	cqo
	idiv     r15
	mov     r12, rdx
if_end190:
	xor     r14, 10001
	mov     rdi, r14
	call    xorshift10
	mov     r14, rax
	mov     r15, qword [rbp-192]
	add     r15, r14
	mov     qword [rbp-192], r15
	xor     rbx, 10002
	mov     rdi, rbx
	call    xorshift10
	mov     rbx, rax
	mov     r14, qword [rbp-208]
	add     r14, rbx
	mov     qword [rbp-208], r14
	xor     r13, 10003
	mov     rdi, r13
	call    xorshift10
	mov     r13, rax
	mov     rbx, qword [rbp-224]
	add     rbx, r13
	mov     qword [rbp-224], rbx
	mov     r13, r12
	xor     r13, 10004
	mov     rdi, r13
	call    xorshift10
	mov     r13, rax
	mov     rbx, qword [rbp-240]
	add     rbx, r13
	mov     qword [rbp-240], rbx
	mov     r13, qword [rbp-440]
	xor     r13, qword [rbp-320]
	xor     r13, qword [rbp-400]
	mov     rbx, r13
	mov     r13, rbx
	xor     r13, qword [rbp-360]
	xor     r13, qword [rbp-520]
	xor     r13, qword [rbp-480]
	mov     rbx, r13
	mov     r13, rbx
	and     r13, qword [rbp-160]
	mov     rbx, r13
	mov     r14, qword [rbp-440]
	sub     r14, qword [rbp-360]
	mov     r13, qword [rbp-400]
	not     r13
	inc     r13
	add     r14, r13
	mov     r13, r14
	sub     r13, qword [rbp-320]
	add     r13, qword [rbp-520]
	add     r13, qword [rbp-480]
	sub     r13, 1
	not     r13
	inc     r13
	and     r13, qword [rbp-160]
	mov     r14, qword [rbp-440]
	mov     rax, r14
	cqo
	idiv     qword [rbp-104]
	mov     r14, rdx
	mov     r12, qword [rbp-480]
	mov     rax, r12
	cqo
	idiv     qword [rbp-104]
	mov     r12, rdx
	imul     r14, r12
	mov     r12, qword [rbp-520]
	mov     rax, r12
	cqo
	idiv     qword [rbp-104]
	mov     r12, rdx
	imul     r14, r12
	mov     r12, r14
	mov     r14, qword [rbp-320]
	mov     rax, r14
	cqo
	idiv     qword [rbp-104]
	mov     r14, rdx
	imul     r12, r14
	mov     r14, qword [rbp-360]
	mov     rax, r14
	cqo
	idiv     qword [rbp-104]
	mov     r14, rdx
	imul     r12, r14
	mov     r14, qword [rbp-400]
	mov     rax, r14
	cqo
	idiv     qword [rbp-104]
	mov     r14, rdx
	imul     r12, r14
	mov     r14, r12
	and     r14, qword [rbp-160]
	mov     r12, r14
	mov     r14, qword [rbp-440]
	xor     r14, qword [rbp-480]
	xor     r14, qword [rbp-520]
	mov     r15, qword [rbp-400]
	xor     r15, qword [rbp-360]
	xor     r15, qword [rbp-320]
	cmp     r14, r15
	jl     if_then256
	jnl     if_else256
if_then256:
	mov     r14, qword [rbp-320]
	add     r14, qword [rbp-360]
	and     r14, qword [rbp-160]
	mov     rax, r14
	cqo
	idiv     qword [rbp-104]
	mov     r14, rdx
	mov     r15, qword [rbp-400]
	mov     rax, r15
	cqo
	idiv     qword [rbp-104]
	mov     r15, rdx
	add     r15, 1
	mov     rax, r14
	cqo
	idiv     r15
	mov     r14, rdx
	jmp    if_end256
if_else256:
	mov     r14, qword [rbp-400]
	add     r14, qword [rbp-360]
	and     r14, qword [rbp-160]
	mov     rax, r14
	cqo
	idiv     qword [rbp-104]
	mov     r14, rdx
	mov     r15, qword [rbp-320]
	mov     rax, r15
	cqo
	idiv     qword [rbp-104]
	mov     r15, rdx
	add     r15, 1
	mov     rax, r14
	cqo
	idiv     r15
	mov     r14, rdx
if_end256:
	xor     rbx, 10001
	mov     rdi, rbx
	call    xorshift10
	mov     rbx, rax
	mov     r15, qword [rbp-192]
	add     r15, rbx
	mov     qword [rbp-192], r15
	xor     r13, 10002
	mov     rdi, r13
	call    xorshift10
	mov     r13, rax
	mov     rbx, qword [rbp-208]
	add     rbx, r13
	mov     qword [rbp-208], rbx
	mov     r13, r12
	xor     r13, 10003
	mov     rdi, r13
	call    xorshift10
	mov     r13, rax
	mov     rbx, qword [rbp-224]
	add     rbx, r13
	mov     qword [rbp-224], rbx
	mov     r13, r14
	xor     r13, 10004
	mov     rdi, r13
	call    xorshift10
	mov     r13, rax
	mov     rbx, qword [rbp-240]
	add     rbx, r13
	mov     qword [rbp-240], rbx
for_step69:
	mov     r13, qword [rbp-272]
	mov     rax, qword [rbp-272]
	add     rax, 1
	mov     qword [rbp-272], rax
	jmp    for_cond69
for_end69:
	mov     rdi, qword [rbp-192]
	call    toStringHex
	mov     r13, rax
	mov     rdi, r13
	mov     rsi, __staticString__3
	call    string.add
	mov     r13, rax
	mov     rdi, r13
	call    print
	mov     r13, rax
	mov     rdi, qword [rbp-208]
	call    toStringHex
	mov     r13, rax
	mov     rdi, r13
	mov     rsi, __staticString__3
	call    string.add
	mov     r13, rax
	mov     rdi, r13
	call    print
	mov     r13, rax
	mov     rdi, qword [rbp-224]
	call    toStringHex
	mov     r13, rax
	mov     rdi, r13
	mov     rsi, __staticString__3
	call    string.add
	mov     r13, rax
	mov     rdi, r13
	call    print
	mov     r13, rax
	mov     rdi, qword [rbp-240]
	call    toStringHex
	mov     r13, rax
	mov     rdi, r13
	mov     rsi, __staticString__3
	call    string.add
	mov     r13, rax
	mov     rdi, r13
	call    print
	mov     r13, rax
	mov     rdi, __staticString__0
	call    println
	mov     r13, rax
	mov     rax, 0
	jmp    main.__end__
	jmp    main.__end__
main.__end__:
	leave
	ret
toString:
	push     rbp
	mov      rbp,rsp
	mov      rdx,rdi
	mov      rax,0
	mov      rdi,stringbuffer
	mov      rsi,format1
	call     sprintf
	mov      rdi,stringbuffer
	call     transtring
	mov      rsp,rbp
	pop      rbp
	ret
println:
	call puts
	ret

array.size:
	mov	rax, qword [rdi - 8]
	ret

string.add:
	push rbp
	mov rbp,rsp
	push rsi
	mov rsi,rdi
	mov rdi,stringbuffer
	mov rdx,[rsi-8]
	push rdx
	call memcpy
	pop rdi
	pop rsi
	add rdi,stringbuffer
	mov rdx,[rsi-8]
	add rdx,1
	call memcpy
	mov rdi,stringbuffer
	call transtring
	mov rsp,rbp
	pop rbp
	ret
getInt:
	push rbp
	mov rbp,rsp
	mov rax,0
	mov rdi,format1
	mov rsi,intbuffer
	call scanf
	mov rax,[intbuffer]
	mov rsp,rbp
	pop rbp
	ret
string.length:
	push    rbp
	mov     rbp, rsp
	mov     qword [rbp-18H], rdi
	mov     dword [rbp-4H], 0
	jmp     Llen_002
Llen_001:  add     dword [rbp-4H], 1
Llen_002:  mov     eax, dword [rbp-4H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jnz     Llen_001
	mov     eax, dword [rbp-4H]
	pop     rbp
	ret
string.ord:
	push    rbp
	mov     rbp, rsp
	mov     qword [rbp-18H], rdi
	mov     dword [rbp-1CH], esi
	mov     eax, dword [rbp-1CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	movsx   eax, al
	mov     dword [rbp-4H], eax
	mov     eax, dword [rbp-4H]
	pop     rbp
	ret
print:
	push rbp
	mov rbp,rsp
	mov rax,0
	mov rsi,rdi
	mov rdi,format2
	call printf
	mov rsp,rbp
	pop rbp
	ret
transtring:

	push rbp
	mov rbp,rsp
	call strlen
	push rdi
	mov rdi,rax
	push rdi
	add rdi,9
	call malloc
	pop rdi
	mov [rax],rdi
	add rax,8
	mov rdx,rdi
	add rdx,1
	mov rdi,rax
	pop rsi
	sub rsp,8
	push rax
	call memcpy
	pop rax
	mov rsp,rbp
	pop rbp
	ret

getString:

	push rbp
	mov rbp,rsp
	mov rax,0
	mov rdi,format2
	mov rsi,stringbuffer
	call scanf
	mov rdi,stringbuffer
	call transtring
	mov rsp,rbp
	pop rbp
	ret

string.substring:
	push rbp
	mov rbp,rsp
	push rdi
	push rsi
	mov rdi,rdx
	sub rdi,rsi
	add rdi,1
	push rdi
	add rdi,9
	call malloc
	pop rdx
	mov [rax],rdx
	add rax,8
	pop rsi
	pop rdi
	add rsi,rdi
	mov rdi,rax
	push rdx
	push rax
	call memcpy
	pop rax
	pop rdx
	mov qword[rax+rdx],0
	mov rsp,rbp
	pop rbp
	ret

string.parseInt:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 32
	mov     qword [rbp-18H], rdi
	mov     edi, 256
	call    malloc
	mov     qword [rbp-8H], rax
	mov     dword [rbp-10H], 0
	mov     dword [rbp-0CH], 0
	jmp     Lpar_002
Lpar_001:  add     dword [rbp-10H], 1
Lpar_002:  mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Lpar_004
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Lpar_001
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Lpar_001
	jmp     Lpar_004
Lpar_003:  mov     edx, dword [rbp-0CH]
	mov     eax, edx
	shl     eax, 2
	add     eax, edx
	add     eax, eax
	mov     ecx, eax
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	movsx   eax, al
	add     eax, ecx
	sub     eax, 48
	mov     dword [rbp-0CH], eax
	add     dword [rbp-10H], 1
Lpar_004:  mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 47
	jle     Lpar_005
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jle     Lpar_003
Lpar_005:  mov     eax, dword [rbp-0CH]
	leave
	ret
	string.eq:
	push    rbp
	mov     rbp, rsp
	mov     qword [rbp-18H], rdi
	mov     qword [rbp-20H], rsi
	mov     dword [rbp-0CH], 0
	mov     dword [rbp-8H], 0
	jmp     Leq_002
Leq_001:  add     dword [rbp-0CH], 1
Leq_002:  mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Leq_004
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Leq_001
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Leq_001
	jmp     Leq_004
Leq_003:  add     dword [rbp-8H], 1
Leq_004:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Leq_005
	mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Leq_003
	mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Leq_003
Leq_005:  mov     eax, dword [rbp-0CH]
	cmp     eax, dword [rbp-8H]
	jz      Leq_006
	mov     eax, 0
	jmp     Leq_010
Leq_006:  mov     dword [rbp-4H], 0
	mov     dword [rbp-4H], 0
	jmp     Leq_009
Leq_007:  mov     eax, dword [rbp-4H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-4H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jz      Leq_008
	mov     eax, 0
	jmp     Leq_010
Leq_008:  add     dword [rbp-4H], 1
Leq_009:  mov     eax, dword [rbp-4H]
	cmp     eax, dword [rbp-0CH]
	jl      Leq_007
	mov     eax, 1
Leq_010:  pop     rbp
	ret
string.lt:
	push    rbp
	mov     rbp, rsp
	mov     qword [rbp-18H], rdi
	mov     qword [rbp-20H], rsi
	mov     dword [rbp-10H], 0
	mov     dword [rbp-0CH], 0
	jmp     Ll_012
Ll_011:  add     dword [rbp-10H], 1
Ll_012:  mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Ll_014
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Ll_011
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Ll_011
	jmp     Ll_014
Ll_013:  add     dword [rbp-0CH], 1
Ll_014:  mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Ll_015
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Ll_013
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Ll_013
Ll_015:  mov     eax, dword [rbp-0CH]
	cmp     dword [rbp-10H], eax
	cmovle  eax, dword [rbp-10H]
	mov     dword [rbp-4H], eax
	mov     dword [rbp-8H], 0
	mov     dword [rbp-8H], 0
	jmp     Ll_019
Ll_016:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-8H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jge     Ll_017
	mov     eax, 1
	jmp     Ll_021
Ll_017:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-8H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jle     Ll_018
	mov     eax, 0
	jmp     Ll_021
Ll_018:  add     dword [rbp-8H], 1
Ll_019:  mov     eax, dword [rbp-8H]
	cmp     eax, dword [rbp-4H]
	jl      Ll_016
	mov     eax, dword [rbp-10H]
	cmp     eax, dword [rbp-0CH]
	jl      Ll_020
	mov     eax, 0
	jmp     Ll_021
Ll_020:  mov     eax, 1
Ll_021:  pop     rbp
	ret
string.gt:
	push    rbp
	mov     rbp, rsp
	mov     qword [rbp-18H], rdi
	mov     qword [rbp-20H], rsi
	mov     dword [rbp-10H], 0
	mov     dword [rbp-0CH], 0
	jmp     Lg_023
Lg_022:  add     dword [rbp-10H], 1
Lg_023:  mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Lg_025
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Lg_022
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Lg_022
	jmp     Lg_025
Lg_024:  add     dword [rbp-0CH], 1
Lg_025:  mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Lg_026
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Lg_024
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Lg_024
Lg_026:  mov     eax, dword [rbp-0CH]
	cmp     dword [rbp-10H], eax
	cmovle  eax, dword [rbp-10H]
	mov     dword [rbp-4H], eax
	mov     dword [rbp-8H], 0
	mov     dword [rbp-8H], 0
	jmp     Lg_030
Lg_027:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-8H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jle     Lg_028
	mov     eax, 1
	jmp     Lg_032
Lg_028:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-8H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jge     Lg_029
	mov     eax, 0
	jmp     Lg_032
Lg_029:  add     dword [rbp-8H], 1
Lg_030:  mov     eax, dword [rbp-8H]
	cmp     eax, dword [rbp-4H]
	jl      Lg_027
	mov     eax, dword [rbp-10H]
	cmp     eax, dword [rbp-0CH]
	jg      Lg_031
	mov     eax, 0
	jmp     Lg_032
Lg_031:  mov     eax, 1
Lg_032:  pop     rbp
	ret
	string.le:
	push    rbp
	mov     rbp, rsp
	mov     qword [rbp-18H], rdi
	mov     qword [rbp-20H], rsi
	mov     dword [rbp-10H], 0
	mov     dword [rbp-0CH], 0
	jmp     Llege_002
Llege_001:  add     dword [rbp-10H], 1
Llege_002:  mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Llege_004
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Llege_001
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Llege_001
	jmp     Llege_004
Llege_003:  add     dword [rbp-0CH], 1
Llege_004:  mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Llege_005
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Llege_003
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Llege_003
Llege_005:  mov     eax, dword [rbp-0CH]
	cmp     dword [rbp-10H], eax
	cmovle  eax, dword [rbp-10H]
	mov     dword [rbp-4H], eax
	mov     dword [rbp-8H], 0
	mov     dword [rbp-8H], 0
	jmp     Llege_009
Llege_006:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-8H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jge     Llege_007
	mov     eax, 1
	jmp     Llege_011
Llege_007:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-8H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jle     Llege_008
	mov     eax, 0
	jmp     Llege_011
Llege_008:  add     dword [rbp-8H], 1
Llege_009:  mov     eax, dword [rbp-8H]
	cmp     eax, dword [rbp-4H]
	jl      Llege_006
	mov     eax, dword [rbp-10H]
	cmp     eax, dword [rbp-0CH]
	jle     Llege_010
	mov     eax, 0
	jmp     Llege_011
	Llege_010:  mov     eax, 1
	Llege_011:  pop     rbp
	ret
	string.ge:
	push    rbp
	mov     rbp, rsp
	mov     qword [rbp-18H], rdi
	mov     qword [rbp-20H], rsi
	mov     dword [rbp-10H], 0
	mov     dword [rbp-0CH], 0
	jmp     Llege_013
Llege_012:  add     dword [rbp-10H], 1
Llege_013:  mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Llege_015
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Llege_012
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Llege_012
	jmp     Llege_015
Llege_014:  add     dword [rbp-0CH], 1
Llege_015:  mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Llege_016
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Llege_014
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Llege_014
Llege_016:  mov     eax, dword [rbp-0CH]
	cmp     dword [rbp-10H], eax
	cmovle  eax, dword [rbp-10H]
	mov     dword [rbp-4H], eax
	mov     dword [rbp-8H], 0
	mov     dword [rbp-8H], 0
	jmp     Llege_020
Llege_017:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-8H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jle     Llege_018
	mov     eax, 1
	jmp     Llege_022
Llege_018:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-8H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jge     Llege_019
	mov     eax, 0
	jmp     Llege_022
Llege_019:  add     dword [rbp-8H], 1
Llege_020:  mov     eax, dword [rbp-8H]
	cmp     eax, dword [rbp-4H]
	jl      Llege_017
	mov     eax, dword [rbp-10H]
	cmp     eax, dword [rbp-0CH]
	jge     Llege_021
	mov     eax, 0
	jmp     Llege_022
Llege_021:  mov     eax, 1
Llege_022:  pop     rbp
	ret
