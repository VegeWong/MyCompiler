global main

extern puts
extern getchar
extern putchar
extern sprintf
extern __stack_chk_fail
extern malloc
extern printf
extern strlen
extern memcpy
extern scanf
section .data
	dq	10
__staticString__3:
	db	118, 101, 99, 116, 111, 114, 32, 120, 58, 32, 0
	dq	10
__staticString__5:
	db	118, 101, 99, 116, 111, 114, 32, 121, 58, 32, 0
	dq	2
__staticString__1:
	db	44, 32, 0
	dq	7
__staticString__7:
	db	120, 32, 42, 32, 121, 58, 32, 0
	dq	8
__staticString__4:
	db	101, 120, 99, 105, 116, 101, 100, 33, 0
	dq	7
__staticString__6:
	db	120, 32, 43, 32, 121, 58, 32, 0
	dq	2
__staticString__0:
	db	40, 32, 0
	dq	2
__staticString__2:
	db	32, 41, 0
	dq	14
__staticString__8:
	db	40, 49, 32, 60, 60, 32, 51, 41, 32, 42, 32, 121, 58, 32, 0
intbuffer:
	dq 0
format1:
	db"%lld",0
format2:
	db"%s",0

section .bss
stringbuffer:
	resb 256
section .text
vector.init:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 120
	mov     qword [rbp-8], rdi
	mov     qword [rbp-16], rsi
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
vector.init.__begin__:
	cmp     qword [rbp-16], 0
	je     if_then0
	jne     if_end0
if_then0:
	jmp    vector.init.__end__
	jmp    if_end0
if_end0:
	mov     rdi, qword [rbp-16]
	call    array.size
	mov     qword [rbp-40], rax
	mov     rax, 0
	mov     qword [rbp-56], rax
	mov     rax, qword [rbp-40]
	mov     qword [rbp-64], rax
	mov     rax, qword [rbp-64]
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	call    malloc
	mov     qword [rbp-48], rax
	mov	r11, qword [rbp-48]
	mov     rax, qword [rbp-40]
	mov     qword [r11-8], rax
	mov	r11, qword [rbp-8]
	mov     rax, qword [rbp-48]
	mov     qword [r11], rax
	mov     rax, 0
	mov     qword [rbp-80], rax
for_cond4:
	mov     rdi, qword [rbp-16]
	call    array.size
	mov     qword [rbp-96], rax
	mov     rcx, qword [rbp-80]
	cmp     rcx, qword [rbp-96]
	jl     for_body4
	jnl     for_end4
for_body4:
	mov	r10, qword [rbp-8]
	mov	r11, qword [rbp-80]
	shl	r11, 3
	add	r11, qword [r10]
	mov	r12, qword [rbp-80]
	shl	r12, 3
	add	r12, qword [rbp-16]
	mov     rax, qword [r12]
	mov     qword [r11], rax
for_step4:
	mov     rax, qword [rbp-80]
	add     rax, 1
	mov     qword [rbp-80], rax
	jmp    for_cond4
for_end4:
	jmp    vector.init.__end__
vector.init.__end__:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	leave
	ret
vector.getDim:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 32
	mov     qword [rbp-8], rdi
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
vector.getDim.__begin__:
	mov	r10, qword [rbp-8]
	cmp     qword [r10], 0
	je     if_then8
	jne     if_end8
if_then8:
	mov     rax, 0
	jmp    vector.getDim.__end__
	jmp    if_end8
if_end8:
	mov	r12, qword [rbp-8]
	mov     rdi, qword [r12]
	call    array.size
	mov     qword [rbp-24], rax
	mov     rax, qword [rbp-24]
	jmp    vector.getDim.__end__
	jmp    vector.getDim.__end__
vector.getDim.__end__:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	leave
	ret
vector.dot:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 96
	mov     qword [rbp-8], rdi
	mov     qword [rbp-16], rsi
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
vector.dot.__begin__:
	mov     rax, 0
	mov     qword [rbp-32], rax
	mov     rax, 0
	mov     qword [rbp-48], rax
while_cond12:
	mov	r12, qword [rbp-8]
	mov     rdi, qword [r12]
	call    vector.getDim
	mov     qword [rbp-64], rax
	mov     rcx, qword [rbp-32]
	cmp     rcx, qword [rbp-64]
	jl     while_body12
	jnl     while_end12
while_body12:
	mov	r10, qword [rbp-8]
	mov	r12, qword [rbp-32]
	shl	r12, 3
	add	r12, qword [r10]
	mov     rax, qword [r12]
	mov     qword [rbp-80], rax
	mov	r10, qword [rbp-16]
	mov	r11, qword [rbp-32]
	shl	r11, 3
	add	r11, qword [r10]
	mov     rax, qword [rbp-80]
	imul     rax, qword [r11]
	mov     qword [rbp-80], rax
	mov     rax, qword [rbp-80]
	mov     qword [rbp-48], rax
	mov     rax, qword [rbp-32]
	add     rax, 1
	mov     qword [rbp-32], rax
	jmp    while_cond12
while_end12:
	mov     rax, qword [rbp-48]
	jmp    vector.dot.__end__
	jmp    vector.dot.__end__
vector.dot.__end__:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	leave
	ret
vector.scalarInPlaceMultiply:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 88
	mov     qword [rbp-8], rdi
	mov     qword [rbp-16], rsi
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
vector.scalarInPlaceMultiply.__begin__:
	mov	r10, qword [rbp-8]
	cmp     qword [r10], 0
	je     if_then15
	jne     if_end15
if_then15:
	mov     rax, 0
	jmp    vector.scalarInPlaceMultiply.__end__
	jmp    if_end15
if_end15:
	mov     rax, 0
	mov     qword [rbp-40], rax
for_cond17:
	mov	r12, qword [rbp-8]
	mov     rdi, qword [r12]
	call    vector.getDim
	mov     qword [rbp-56], rax
	mov     rcx, qword [rbp-40]
	cmp     rcx, qword [rbp-56]
	jl     for_body17
	jnl     for_end17
for_body17:
	mov     rax, qword [rbp-16]
	mov     qword [rbp-72], rax
	mov	r10, qword [rbp-8]
	mov	r11, qword [rbp-40]
	shl	r11, 3
	add	r11, qword [r10]
	mov     rax, qword [rbp-72]
	imul     rax, qword [r11]
	mov     qword [rbp-72], rax
	mov	r10, qword [rbp-8]
	mov	r11, qword [rbp-40]
	shl	r11, 3
	add	r11, qword [r10]
	mov     rax, qword [rbp-72]
	mov     qword [r11], rax
for_step17:
	mov     rax, qword [rbp-40]
	add     rax, 1
	mov     qword [rbp-40], rax
	jmp    for_cond17
for_end17:
	mov     rax, qword [rbp-8]
	jmp    vector.scalarInPlaceMultiply.__end__
	jmp    vector.scalarInPlaceMultiply.__end__
vector.scalarInPlaceMultiply.__end__:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	leave
	ret
vector.add:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 192
	mov     qword [rbp-8], rdi
	mov     qword [rbp-16], rsi
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
vector.add.__begin__:
	mov	r12, qword [rbp-8]
	mov     rdi, qword [r12]
	call    vector.getDim
	mov     qword [rbp-40], rax
	mov     rdi, qword [rbp-16]
	call    vector.getDim
	mov     qword [rbp-48], rax
	mov     rcx, qword [rbp-40]
	cmp     rcx, qword [rbp-48]
	jne     if_then22
	je     rhs__begin__23
rhs__begin__23:
	mov	r12, qword [rbp-8]
	mov     rdi, qword [r12]
	call    vector.getDim
	mov     qword [rbp-64], rax
	cmp     qword [rbp-64], 0
	je     if_then22
	jne     if_end22
if_then22:
	mov     rax, 0
	jmp    vector.add.__end__
	jmp    if_end22
if_end22:
	mov     rdi, 8
	call    malloc
	mov     qword [rbp-88], rax
	mov     rax, qword [rbp-88]
	mov     qword [rbp-80], rax
	mov	r12, qword [rbp-8]
	mov     rdi, qword [r12]
	call    vector.getDim
	mov     qword [rbp-104], rax
	mov     rax, 0
	mov     qword [rbp-120], rax
	mov     rax, qword [rbp-104]
	mov     qword [rbp-128], rax
	mov     rax, qword [rbp-128]
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	call    malloc
	mov     qword [rbp-112], rax
	mov	r11, qword [rbp-112]
	mov     rax, qword [rbp-104]
	mov     qword [r11-8], rax
	mov	r11, qword [rbp-80]
	mov     rax, qword [rbp-112]
	mov     qword [r11], rax
	mov     rax, 0
	mov     qword [rbp-144], rax
for_cond29:
	mov	r12, qword [rbp-8]
	mov     rdi, qword [r12]
	call    vector.getDim
	mov     qword [rbp-160], rax
	mov     rcx, qword [rbp-144]
	cmp     rcx, qword [rbp-160]
	jl     for_body29
	jnl     for_end29
for_body29:
	mov	r10, qword [rbp-8]
	mov	r12, qword [rbp-144]
	shl	r12, 3
	add	r12, qword [r10]
	mov     rax, qword [r12]
	mov     qword [rbp-176], rax
	mov	r10, qword [rbp-16]
	mov	r11, qword [rbp-144]
	shl	r11, 3
	add	r11, qword [r10]
	mov     rax, qword [rbp-176]
	add     rax, qword [r11]
	mov     qword [rbp-176], rax
	mov	r10, qword [rbp-80]
	mov	r11, qword [rbp-144]
	shl	r11, 3
	add	r11, qword [r10]
	mov     rax, qword [rbp-176]
	mov     qword [r11], rax
for_step29:
	mov     rax, qword [rbp-144]
	add     rax, 1
	mov     qword [rbp-144], rax
	jmp    for_cond29
for_end29:
	mov     rax, qword [rbp-80]
	jmp    vector.add.__end__
	jmp    vector.add.__end__
vector.add.__end__:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	leave
	ret
vector.set:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 56
	mov     qword [rbp-8], rdi
	mov     qword [rbp-16], rsi
	mov     qword [rbp-24], rdx
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
vector.set.__begin__:
	mov	r12, qword [rbp-8]
	mov     rdi, qword [r12]
	call    vector.getDim
	mov     qword [rbp-40], rax
	mov     rcx, qword [rbp-40]
	cmp     rcx, qword [rbp-16]
	jl     if_then34
	jnl     if_end34
if_then34:
	mov     rax, 0
	jmp    vector.set.__end__
	jmp    if_end34
if_end34:
	mov	r10, qword [rbp-8]
	mov	r11, qword [rbp-16]
	shl	r11, 3
	add	r11, qword [r10]
	mov     rax, qword [rbp-24]
	mov     qword [r11], rax
	mov     rax, 1
	jmp    vector.set.__end__
	jmp    vector.set.__end__
vector.set.__end__:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	leave
	ret
vector.tostring:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 168
	mov     qword [rbp-8], rdi
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
vector.tostring.__begin__:
	mov     rax, qword __staticString__0
	mov     qword [rbp-24], rax
	mov	r12, qword [rbp-8]
	mov     rdi, qword [r12]
	call    vector.getDim
	mov     qword [rbp-40], rax
	cmp     qword [rbp-40], 0
	jg     if_then38
	jng     if_end38
if_then38:
	mov	r10, qword [rbp-8]
	mov	r12, 0
	shl	r12, 3
	add	r12, qword [r10]
	mov     rdi, qword [r12]
	call    toString
	mov     qword [rbp-72], rax
	mov     rdi, qword [rbp-24]
	mov     rsi, qword [rbp-72]
	call    string.add
	mov     qword [rbp-56], rax
	mov     rax, qword [rbp-56]
	mov     qword [rbp-24], rax
	jmp    if_end38
if_end38:
	mov     rax, 1
	mov     qword [rbp-88], rax
for_cond42:
	mov	r12, qword [rbp-8]
	mov     rdi, qword [r12]
	call    vector.getDim
	mov     qword [rbp-104], rax
	mov     rcx, qword [rbp-88]
	cmp     rcx, qword [rbp-104]
	jl     for_body42
	jnl     for_end42
for_body42:
	mov     rdi, qword [rbp-24]
	mov     rsi, __staticString__1
	call    string.add
	mov     qword [rbp-128], rax
	mov	r10, qword [rbp-8]
	mov	r12, qword [rbp-88]
	shl	r12, 3
	add	r12, qword [r10]
	mov     rdi, qword [r12]
	call    toString
	mov     qword [rbp-136], rax
	mov     rdi, qword [rbp-128]
	mov     rsi, qword [rbp-136]
	call    string.add
	mov     qword [rbp-120], rax
	mov     rax, qword [rbp-120]
	mov     qword [rbp-24], rax
for_step42:
	mov     rax, qword [rbp-88]
	add     rax, 1
	mov     qword [rbp-88], rax
	jmp    for_cond42
for_end42:
	mov     rdi, qword [rbp-24]
	mov     rsi, __staticString__2
	call    string.add
	mov     qword [rbp-160], rax
	mov     rax, qword [rbp-160]
	mov     qword [rbp-24], rax
	mov     rax, qword [rbp-24]
	jmp    vector.tostring.__end__
	jmp    vector.tostring.__end__
vector.tostring.__end__:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	leave
	ret
vector.copy:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 144
	mov     qword [rbp-8], rdi
	mov     qword [rbp-16], rsi
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
vector.copy.__begin__:
	cmp     qword [rbp-16], 0
	je     if_then50
	jne     if_end50
if_then50:
	mov     rax, 0
	jmp    vector.copy.__end__
	jmp    if_end50
if_end50:
	mov     rdi, qword [rbp-16]
	call    vector.getDim
	mov     qword [rbp-40], rax
	cmp     qword [rbp-40], 0
	je     if_then52
	jne     if_else52
if_then52:
	mov	r11, qword [rbp-8]
	mov     rax, 0
	mov     qword [r11], rax
	jmp    if_end52
if_else52:
	mov     rdi, qword [rbp-16]
	call    vector.getDim
	mov     qword [rbp-64], rax
	mov     rax, 0
	mov     qword [rbp-80], rax
	mov     rax, qword [rbp-64]
	mov     qword [rbp-88], rax
	mov     rax, qword [rbp-88]
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	call    malloc
	mov     qword [rbp-72], rax
	mov	r11, qword [rbp-72]
	mov     rax, qword [rbp-64]
	mov     qword [r11-8], rax
	mov	r11, qword [rbp-8]
	mov     rax, qword [rbp-72]
	mov     qword [r11], rax
	mov     rax, 0
	mov     qword [rbp-104], rax
for_cond57:
	mov	r12, qword [rbp-8]
	mov     rdi, qword [r12]
	call    vector.getDim
	mov     qword [rbp-120], rax
	mov     rcx, qword [rbp-104]
	cmp     rcx, qword [rbp-120]
	jl     for_body57
	jnl     for_end57
for_body57:
	mov	r10, qword [rbp-8]
	mov	r11, qword [rbp-104]
	shl	r11, 3
	add	r11, qword [r10]
	mov	r10, qword [rbp-16]
	mov	r12, qword [rbp-104]
	shl	r12, 3
	add	r12, qword [r10]
	mov     rax, qword [r12]
	mov     qword [r11], rax
for_step57:
	mov     rax, qword [rbp-104]
	add     rax, 1
	mov     qword [rbp-104], rax
	jmp    for_cond57
for_end57:
if_end52:
	mov     rax, 1
	jmp    vector.copy.__end__
	jmp    vector.copy.__end__
vector.copy.__end__:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	leave
	ret
main:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 344
main.__begin__:
	mov     rdi, 8
	call    malloc
	mov     qword [rbp-24], rax
	mov     rax, qword [rbp-24]
	mov     qword [rbp-16], rax
	mov     rax, 0
	mov     qword [rbp-56], rax
	mov     rax, 10
	mov     qword [rbp-64], rax
	mov     rax, qword [rbp-64]
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	call    malloc
	mov     qword [rbp-48], rax
	mov	r11, qword [rbp-48]
	mov     rax, 10
	mov     qword [r11-8], rax
	mov     rax, qword [rbp-48]
	mov     qword [rbp-40], rax
	mov     rax, 0
	mov     qword [rbp-80], rax
for_cond64:
	cmp     qword [rbp-80], 10
	jl     for_body64
	jnl     for_end64
for_body64:
	mov     rax, 9
	mov     qword [rbp-104], rax
	mov     rax, qword [rbp-104]
	sub     rax, qword [rbp-80]
	mov     qword [rbp-104], rax
	mov	r11, qword [rbp-80]
	shl	r11, 3
	add	r11, qword [rbp-40]
	mov     rax, qword [rbp-104]
	mov     qword [r11], rax
for_step64:
	mov     rax, qword [rbp-80]
	add     rax, 1
	mov     qword [rbp-80], rax
	jmp    for_cond64
for_end64:
	mov     rsi, qword [rbp-40]
	mov     rdi, qword [rbp-16]
	call    vector.init
	mov     qword [rbp-120], rax
	mov     rdi, __staticString__3
	call    print
	mov     qword [rbp-136], rax
	mov     rdi, qword [rbp-16]
	call    vector.tostring
	mov     qword [rbp-152], rax
	mov     rdi, qword [rbp-152]
	call    println
	mov     qword [rbp-160], rax
	mov     rdi, 8
	call    malloc
	mov     qword [rbp-184], rax
	mov     rax, qword [rbp-184]
	mov     qword [rbp-176], rax
	mov     rsi, qword [rbp-16]
	mov     rdi, qword [rbp-176]
	call    vector.copy
	mov     qword [rbp-192], rax
	mov     rdx, 817
	mov     rsi, 3
	mov     rdi, qword [rbp-176]
	call    vector.set
	cmp     rax, 0
	jne     if_then70
	je     if_end70
if_then70:
	mov     rdi, __staticString__4
	call    println
	mov     qword [rbp-200], rax
	jmp    if_end70
if_end70:
	mov     rdi, __staticString__5
	call    print
	mov     qword [rbp-208], rax
	mov     rdi, qword [rbp-176]
	call    vector.tostring
	mov     qword [rbp-216], rax
	mov     rdi, qword [rbp-216]
	call    println
	mov     qword [rbp-224], rax
	mov     rdi, __staticString__6
	call    print
	mov     qword [rbp-232], rax
	mov     rsi, qword [rbp-176]
	mov     rdi, qword [rbp-16]
	call    vector.add
	mov     qword [rbp-240], rax
	mov     rdi, qword [rbp-240]
	call    vector.tostring
	mov     qword [rbp-248], rax
	mov     rdi, qword [rbp-248]
	call    println
	mov     qword [rbp-256], rax
	mov     rdi, __staticString__7
	call    print
	mov     qword [rbp-264], rax
	mov     rsi, qword [rbp-176]
	mov     rdi, qword [rbp-16]
	call    vector.dot
	mov     qword [rbp-280], rax
	mov     rdi, qword [rbp-280]
	call    toString
	mov     qword [rbp-288], rax
	mov     rdi, qword [rbp-288]
	call    println
	mov     qword [rbp-296], rax
	mov     rdi, __staticString__8
	call    print
	mov     qword [rbp-304], rax
	mov     rsi, 8
	mov     rdi, qword [rbp-176]
	call    vector.scalarInPlaceMultiply
	mov     qword [rbp-320], rax
	mov     rdi, qword [rbp-320]
	call    vector.tostring
	mov     qword [rbp-328], rax
	mov     rdi, qword [rbp-328]
	call    println
	mov     qword [rbp-336], rax
	mov     rax, 0
	jmp    main.__end__
	jmp    main.__end__
main.__end__:
	leave
	ret
toString:
	push     rbp
	mov      rbp,rsp
	mov      rdx,rdi
	mov      rax,0
	mov      rdi,stringbuffer
	mov      rsi,format1
	call     sprintf
	mov      rdi,stringbuffer
	call     transtring
	mov      rsp,rbp
	pop      rbp
	ret
println:
	call puts
	ret

array.size:
	mov	rax, qword [rdi - 8]
	ret

string.add:
	push rbp
	mov rbp,rsp
	push rsi
	mov rsi,rdi
	mov rdi,stringbuffer
	mov rdx,[rsi-8]
	push rdx
	call memcpy
	pop rdi
	pop rsi
	add rdi,stringbuffer
	mov rdx,[rsi-8]
	add rdx,1
	call memcpy
	mov rdi,stringbuffer
	call transtring
	mov rsp,rbp
	pop rbp
	ret
getInt:
	push rbp
	mov rbp,rsp
	mov rax,0
	mov rdi,format1
	mov rsi,intbuffer
	call scanf
	mov rax,[intbuffer]
	mov rsp,rbp
	pop rbp
	ret
string.length:
	push    rbp
	mov     rbp, rsp
	mov     qword [rbp-18H], rdi
	mov     dword [rbp-4H], 0
	jmp     Llen_002
Llen_001:  add     dword [rbp-4H], 1
Llen_002:  mov     eax, dword [rbp-4H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jnz     Llen_001
	mov     eax, dword [rbp-4H]
	pop     rbp
	ret
string.ord:
	push    rbp
	mov     rbp, rsp
	mov     qword [rbp-18H], rdi
	mov     dword [rbp-1CH], esi
	mov     eax, dword [rbp-1CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	movsx   eax, al
	mov     dword [rbp-4H], eax
	mov     eax, dword [rbp-4H]
	pop     rbp
	ret
print:
	push rbp
	mov rbp,rsp
	mov rax,0
	mov rsi,rdi
	mov rdi,format2
	call printf
	mov rsp,rbp
	pop rbp
	ret
transtring:

	push rbp
	mov rbp,rsp
	call strlen
	push rdi
	mov rdi,rax
	push rdi
	add rdi,9
	call malloc
	pop rdi
	mov [rax],rdi
	add rax,8
	mov rdx,rdi
	add rdx,1
	mov rdi,rax
	pop rsi
	sub rsp,8
	push rax
	call memcpy
	pop rax
	mov rsp,rbp
	pop rbp
	ret

getString:

	push rbp
	mov rbp,rsp
	mov rax,0
	mov rdi,format2
	mov rsi,stringbuffer
	call scanf
	mov rdi,stringbuffer
	call transtring
	mov rsp,rbp
	pop rbp
	ret

string.substring:
	push rbp
	mov rbp,rsp
	push rdi
	push rsi
	mov rdi,rdx
	sub rdi,rsi
	add rdi,1
	push rdi
	add rdi,9
	call malloc
	pop rdx
	mov [rax],rdx
	add rax,8
	pop rsi
	pop rdi
	add rsi,rdi
	mov rdi,rax
	push rdx
	push rax
	call memcpy
	pop rax
	pop rdx
	mov qword[rax+rdx],0
	mov rsp,rbp
	pop rbp
	ret

string.parseInt:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 32
	mov     qword [rbp-18H], rdi
	mov     edi, 256
	call    malloc
	mov     qword [rbp-8H], rax
	mov     dword [rbp-10H], 0
	mov     dword [rbp-0CH], 0
	jmp     Lpar_002
Lpar_001:  add     dword [rbp-10H], 1
Lpar_002:  mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Lpar_004
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Lpar_001
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Lpar_001
	jmp     Lpar_004
Lpar_003:  mov     edx, dword [rbp-0CH]
	mov     eax, edx
	shl     eax, 2
	add     eax, edx
	add     eax, eax
	mov     ecx, eax
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	movsx   eax, al
	add     eax, ecx
	sub     eax, 48
	mov     dword [rbp-0CH], eax
	add     dword [rbp-10H], 1
Lpar_004:  mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 47
	jle     Lpar_005
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jle     Lpar_003
Lpar_005:  mov     eax, dword [rbp-0CH]
	leave
	ret
	string.eq:
	push    rbp
	mov     rbp, rsp
	mov     qword [rbp-18H], rdi
	mov     qword [rbp-20H], rsi
	mov     dword [rbp-0CH], 0
	mov     dword [rbp-8H], 0
	jmp     Leq_002
Leq_001:  add     dword [rbp-0CH], 1
Leq_002:  mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Leq_004
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Leq_001
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Leq_001
	jmp     Leq_004
Leq_003:  add     dword [rbp-8H], 1
Leq_004:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Leq_005
	mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Leq_003
	mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Leq_003
Leq_005:  mov     eax, dword [rbp-0CH]
	cmp     eax, dword [rbp-8H]
	jz      Leq_006
	mov     eax, 0
	jmp     Leq_010
Leq_006:  mov     dword [rbp-4H], 0
	mov     dword [rbp-4H], 0
	jmp     Leq_009
Leq_007:  mov     eax, dword [rbp-4H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-4H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jz      Leq_008
	mov     eax, 0
	jmp     Leq_010
Leq_008:  add     dword [rbp-4H], 1
Leq_009:  mov     eax, dword [rbp-4H]
	cmp     eax, dword [rbp-0CH]
	jl      Leq_007
	mov     eax, 1
Leq_010:  pop     rbp
	ret
string.lt:
	push    rbp
	mov     rbp, rsp
	mov     qword [rbp-18H], rdi
	mov     qword [rbp-20H], rsi
	mov     dword [rbp-10H], 0
	mov     dword [rbp-0CH], 0
	jmp     Ll_012
Ll_011:  add     dword [rbp-10H], 1
Ll_012:  mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Ll_014
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Ll_011
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Ll_011
	jmp     Ll_014
Ll_013:  add     dword [rbp-0CH], 1
Ll_014:  mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Ll_015
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Ll_013
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Ll_013
Ll_015:  mov     eax, dword [rbp-0CH]
	cmp     dword [rbp-10H], eax
	cmovle  eax, dword [rbp-10H]
	mov     dword [rbp-4H], eax
	mov     dword [rbp-8H], 0
	mov     dword [rbp-8H], 0
	jmp     Ll_019
Ll_016:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-8H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jge     Ll_017
	mov     eax, 1
	jmp     Ll_021
Ll_017:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-8H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jle     Ll_018
	mov     eax, 0
	jmp     Ll_021
Ll_018:  add     dword [rbp-8H], 1
Ll_019:  mov     eax, dword [rbp-8H]
	cmp     eax, dword [rbp-4H]
	jl      Ll_016
	mov     eax, dword [rbp-10H]
	cmp     eax, dword [rbp-0CH]
	jl      Ll_020
	mov     eax, 0
	jmp     Ll_021
Ll_020:  mov     eax, 1
Ll_021:  pop     rbp
	ret
string.gt:
	push    rbp
	mov     rbp, rsp
	mov     qword [rbp-18H], rdi
	mov     qword [rbp-20H], rsi
	mov     dword [rbp-10H], 0
	mov     dword [rbp-0CH], 0
	jmp     Lg_023
Lg_022:  add     dword [rbp-10H], 1
Lg_023:  mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Lg_025
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Lg_022
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Lg_022
	jmp     Lg_025
Lg_024:  add     dword [rbp-0CH], 1
Lg_025:  mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Lg_026
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Lg_024
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Lg_024
Lg_026:  mov     eax, dword [rbp-0CH]
	cmp     dword [rbp-10H], eax
	cmovle  eax, dword [rbp-10H]
	mov     dword [rbp-4H], eax
	mov     dword [rbp-8H], 0
	mov     dword [rbp-8H], 0
	jmp     Lg_030
Lg_027:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-8H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jle     Lg_028
	mov     eax, 1
	jmp     Lg_032
Lg_028:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-8H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jge     Lg_029
	mov     eax, 0
	jmp     Lg_032
Lg_029:  add     dword [rbp-8H], 1
Lg_030:  mov     eax, dword [rbp-8H]
	cmp     eax, dword [rbp-4H]
	jl      Lg_027
	mov     eax, dword [rbp-10H]
	cmp     eax, dword [rbp-0CH]
	jg      Lg_031
	mov     eax, 0
	jmp     Lg_032
Lg_031:  mov     eax, 1
Lg_032:  pop     rbp
	ret
	string.le:
	push    rbp
	mov     rbp, rsp
	mov     qword [rbp-18H], rdi
	mov     qword [rbp-20H], rsi
	mov     dword [rbp-10H], 0
	mov     dword [rbp-0CH], 0
	jmp     Llege_002
Llege_001:  add     dword [rbp-10H], 1
Llege_002:  mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Llege_004
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Llege_001
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Llege_001
	jmp     Llege_004
Llege_003:  add     dword [rbp-0CH], 1
Llege_004:  mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Llege_005
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Llege_003
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Llege_003
Llege_005:  mov     eax, dword [rbp-0CH]
	cmp     dword [rbp-10H], eax
	cmovle  eax, dword [rbp-10H]
	mov     dword [rbp-4H], eax
	mov     dword [rbp-8H], 0
	mov     dword [rbp-8H], 0
	jmp     Llege_009
Llege_006:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-8H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jge     Llege_007
	mov     eax, 1
	jmp     Llege_011
Llege_007:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-8H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jle     Llege_008
	mov     eax, 0
	jmp     Llege_011
Llege_008:  add     dword [rbp-8H], 1
Llege_009:  mov     eax, dword [rbp-8H]
	cmp     eax, dword [rbp-4H]
	jl      Llege_006
	mov     eax, dword [rbp-10H]
	cmp     eax, dword [rbp-0CH]
	jle     Llege_010
	mov     eax, 0
	jmp     Llege_011
	Llege_010:  mov     eax, 1
	Llege_011:  pop     rbp
	ret
	string.ge:
	push    rbp
	mov     rbp, rsp
	mov     qword [rbp-18H], rdi
	mov     qword [rbp-20H], rsi
	mov     dword [rbp-10H], 0
	mov     dword [rbp-0CH], 0
	jmp     Llege_013
Llege_012:  add     dword [rbp-10H], 1
Llege_013:  mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Llege_015
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Llege_012
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Llege_012
	jmp     Llege_015
Llege_014:  add     dword [rbp-0CH], 1
Llege_015:  mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Llege_016
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Llege_014
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Llege_014
Llege_016:  mov     eax, dword [rbp-0CH]
	cmp     dword [rbp-10H], eax
	cmovle  eax, dword [rbp-10H]
	mov     dword [rbp-4H], eax
	mov     dword [rbp-8H], 0
	mov     dword [rbp-8H], 0
	jmp     Llege_020
Llege_017:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-8H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jle     Llege_018
	mov     eax, 1
	jmp     Llege_022
Llege_018:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-8H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jge     Llege_019
	mov     eax, 0
	jmp     Llege_022
Llege_019:  add     dword [rbp-8H], 1
Llege_020:  mov     eax, dword [rbp-8H]
	cmp     eax, dword [rbp-4H]
	jl      Llege_017
	mov     eax, dword [rbp-10H]
	cmp     eax, dword [rbp-0CH]
	jge     Llege_021
	mov     eax, 0
	jmp     Llege_022
Llege_021:  mov     eax, 1
Llege_022:  pop     rbp
	ret
