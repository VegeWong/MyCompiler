global main

extern puts
extern getchar
extern putchar
extern sprintf
extern __stack_chk_fail
extern malloc
extern printf
extern strlen
extern memcpy
extern scanf
section .data
__global__N:
	dq	0
__global__n:
	dq	0
__global__a:
	dq	0
__global__bak:
	dq	0
__global__a_left:
	dq	0
__global__a_right:
	dq	0
__global__heap:
	dq	0
__global__i1:
	dq	0
__global__i2:
	dq	0
__global__i3:
	dq	0
__global__i4:
	dq	0
__global__i5:
	dq	0
__global__i6:
	dq	0
__global__i7:
	dq	0
__global__i8:
	dq	0
__global__i9:
	dq	0
__global__i10:
	dq	0
__global__i11:
	dq	0
__global__i12:
	dq	0
__global__i13:
	dq	0
__global__i14:
	dq	0
intbuffer:
	dq 0
format1:
	db"%lld",0
format2:
	db"%s",0

section .bss
stringbuffer:
	resb 256
section .text
A.A:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 336
	mov     qword [rbp-8], rdi
	push     rbp
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
A.A.__begin__:
	mov     r14, 0
	mov     r15, 2
	mov     rax, r15
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    malloc
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	add     rax, 8
	mov     r15, rax
	mov     rax, 2
	mov     qword [r15-8], rax
	mov     r13, r15
dimension_body1:
	push     rbp
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
	mov     r14, 0
	mov     r15, 2
	mov     rax, r15
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    malloc
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	add     rax, 8
	mov     qword [r13], rax
	mov     r15, qword [r13]
	mov     rax, 2
	mov     qword [r15-8], rax
	mov     r13, qword [r13]
dimension_body2:
	push     rbp
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
	mov     r14, 0
	mov     r15, 3
	mov     rax, r15
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    malloc
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	add     rax, 8
	mov     qword [r13], rax
	mov     r15, qword [r13]
	mov     rax, 3
	mov     qword [r15-8], rax
	mov     r13, qword [r13]
dimension_body3:
	push     rbp
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
	mov     r14, 0
	mov     r15, 2
	mov     rax, r15
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    malloc
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	add     rax, 8
	mov     qword [r13], rax
	mov     r15, qword [r13]
	mov     rax, 2
	mov     qword [r15-8], rax
	mov     r13, qword [r13]
dimension_body4:
	push     rbp
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
	mov     r14, 0
	mov     r15, 3
	mov     rax, r15
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    malloc
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	add     rax, 8
	mov     qword [r13], rax
	mov     r15, qword [r13]
	mov     rax, 3
	mov     qword [r15-8], rax
	mov     r13, qword [r13]
dimension_body5:
	push     rbp
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
	mov     r14, 0
	mov     r15, 2
	mov     rax, r15
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    malloc
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	add     rax, 8
	mov     qword [r13], rax
	mov     r15, qword [r13]
	mov     rax, 2
	mov     qword [r15-8], rax
	mov     r13, qword [r13]
dimension_body6:
	push     rbp
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
	mov     r14, 0
	mov     r15, 2
	mov     rax, r15
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    malloc
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	add     rax, 8
	mov     qword [r13], rax
	mov     r15, qword [r13]
	mov     rax, 2
	mov     qword [r15-8], rax
	mov     r13, qword [r13]
dimension_body7:
	push     rbp
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
	mov     r14, 0
	mov     r15, 3
	mov     rax, r15
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    malloc
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	add     rax, 8
	mov     qword [r13], rax
	mov     r15, qword [r13]
	mov     rax, 3
	mov     qword [r15-8], rax
	mov     r12, qword [r13]
dimension_body8:
	push     rbp
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
	mov     r13, 0
	mov     r14, 2
	mov     rax, r14
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    malloc
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	add     rax, 8
	mov     qword [r12], rax
	mov     r15, qword [r12]
	mov     rax, 2
	mov     qword [r15-8], rax
	mov     r15, qword [r12]
dimension_body9:
	push     rbp
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
	mov     r12, 0
	mov     r12, 2
	mov     rax, r12
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    malloc
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	add     rax, 8
	mov     qword [r15], rax
	mov     r12, qword [r15]
	mov     rax, 2
	mov     qword [r12-8], rax
	add     r15, 8
	add     r13, 1
	cmp     r13, r14
	jl     dimension_body9
dimension_end9:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	pop     rbp
	add     r12, 8
	add     r14, 1
	cmp     r14, r15
	jl     dimension_body8
dimension_end8:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	pop     rbp
	add     r13, 8
	add     r14, 1
	cmp     r14, r15
	jl     dimension_body7
dimension_end7:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	pop     rbp
	add     r13, 8
	add     r14, 1
	cmp     r14, r15
	jl     dimension_body6
dimension_end6:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	pop     rbp
	add     r13, 8
	add     r14, 1
	cmp     r14, r15
	jl     dimension_body5
dimension_end5:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	pop     rbp
	add     r13, 8
	add     r14, 1
	cmp     r14, r15
	jl     dimension_body4
dimension_end4:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	pop     rbp
	add     r13, 8
	add     r14, 1
	cmp     r14, r15
	jl     dimension_body3
dimension_end3:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	pop     rbp
	add     r13, 8
	add     r14, 1
	cmp     r14, r15
	jl     dimension_body2
dimension_end2:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	pop     rbp
	add     r13, 8
	add     r14, 1
	cmp     r14, r15
	jl     dimension_body1
dimension_end1:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	pop     rbp
	mov	r11, qword [rbp-8]
	mov     qword [r11], r15
	jmp    A.A.__end__
A.A.__end__:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	leave
	ret
A.Optimizer:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 2136
	mov     qword [rbp-8], rdi
	push     rbp
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
A.Optimizer.__begin__:
	mov     r14, 0
	mov     r15, 2
	mov     rax, r15
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    malloc
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	add     rax, 8
	mov     r15, rax
	mov     rax, 2
	mov     qword [r15-8], rax
	mov     r13, r15
dimension_body12:
	push     rbp
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
	mov     r14, 0
	mov     r15, 2
	mov     rax, r15
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    malloc
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	add     rax, 8
	mov     qword [r13], rax
	mov     r15, qword [r13]
	mov     rax, 2
	mov     qword [r15-8], rax
	mov     r13, qword [r13]
dimension_body13:
	push     rbp
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
	mov     r14, 0
	mov     r15, 2
	mov     rax, r15
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    malloc
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	add     rax, 8
	mov     qword [r13], rax
	mov     r15, qword [r13]
	mov     rax, 2
	mov     qword [r15-8], rax
	mov     r13, qword [r13]
dimension_body14:
	push     rbp
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
	mov     r14, 0
	mov     r15, 2
	mov     rax, r15
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    malloc
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	add     rax, 8
	mov     qword [r13], rax
	mov     r15, qword [r13]
	mov     rax, 2
	mov     qword [r15-8], rax
	mov     r13, qword [r13]
dimension_body15:
	push     rbp
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
	mov     r14, 0
	mov     r15, 2
	mov     rax, r15
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    malloc
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	add     rax, 8
	mov     qword [r13], rax
	mov     r15, qword [r13]
	mov     rax, 2
	mov     qword [r15-8], rax
	mov     r13, qword [r13]
dimension_body16:
	push     rbp
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
	mov     r14, 0
	mov     r15, 2
	mov     rax, r15
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    malloc
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	add     rax, 8
	mov     qword [r13], rax
	mov     r15, qword [r13]
	mov     rax, 2
	mov     qword [r15-8], rax
	mov     r13, qword [r13]
dimension_body17:
	push     rbp
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
	mov     r14, 0
	mov     r15, 2
	mov     rax, r15
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    malloc
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	add     rax, 8
	mov     qword [r13], rax
	mov     r15, qword [r13]
	mov     rax, 2
	mov     qword [r15-8], rax
	mov     r13, qword [r13]
dimension_body18:
	push     rbp
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
	mov     r14, 0
	mov     r15, 2
	mov     rax, r15
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    malloc
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	add     rax, 8
	mov     qword [r13], rax
	mov     r15, qword [r13]
	mov     rax, 2
	mov     qword [r15-8], rax
	mov     r12, qword [r13]
dimension_body19:
	push     rbp
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
	mov     r13, 0
	mov     r14, 2
	mov     rax, r14
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    malloc
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	add     rax, 8
	mov     qword [r12], rax
	mov     r15, qword [r12]
	mov     rax, 2
	mov     qword [r15-8], rax
	mov     r15, qword [r12]
dimension_body20:
	push     rbp
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
	mov     r12, 0
	mov     r12, 2
	mov     rax, r12
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    malloc
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	add     rax, 8
	mov     qword [r15], rax
	mov     r12, qword [r15]
	mov     rax, 2
	mov     qword [r12-8], rax
	add     r15, 8
	add     r13, 1
	cmp     r13, r14
	jl     dimension_body20
dimension_end20:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	pop     rbp
	add     r12, 8
	add     r14, 1
	cmp     r14, r15
	jl     dimension_body19
dimension_end19:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	pop     rbp
	add     r13, 8
	add     r14, 1
	cmp     r14, r15
	jl     dimension_body18
dimension_end18:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	pop     rbp
	add     r13, 8
	add     r14, 1
	cmp     r14, r15
	jl     dimension_body17
dimension_end17:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	pop     rbp
	add     r13, 8
	add     r14, 1
	cmp     r14, r15
	jl     dimension_body16
dimension_end16:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	pop     rbp
	add     r13, 8
	add     r14, 1
	cmp     r14, r15
	jl     dimension_body15
dimension_end15:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	pop     rbp
	add     r13, 8
	add     r14, 1
	cmp     r14, r15
	jl     dimension_body14
dimension_end14:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	pop     rbp
	add     r13, 8
	add     r14, 1
	cmp     r14, r15
	jl     dimension_body13
dimension_end13:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	pop     rbp
	add     r13, 8
	add     r14, 1
	cmp     r14, r15
	jl     dimension_body12
dimension_end12:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	pop     rbp
	mov     qword [rbp-24], r15
	mov     r14, 0
	mov     r15, 1
for_cond23:
	cmp     r15, 1000
	jle     for_body23
	jnle     for_end23
for_body23:
	mov     r12, 1
	shl	r12, 3
	mov	r11, 0
	shl	r11, 3
	add	r11, qword [rbp-24]
	add     r12, qword [r11]
	mov     r13, 0
	shl	r13, 3
	add     r13, qword [r12]
	mov     r12, 1
	shl	r12, 3
	add     r12, qword [r13]
	mov     r13, 0
	shl	r13, 3
	add     r13, qword [r12]
	mov     r12, 1
	shl	r12, 3
	add     r12, qword [r13]
	mov     r13, 0
	shl	r13, 3
	add     r13, qword [r12]
	mov     r12, 1
	shl	r12, 3
	add     r12, qword [r13]
	mov     r13, 0
	shl	r13, 3
	add     r13, qword [r12]
	mov     r12, 1
	shl	r12, 3
	add     r12, qword [r13]
	mov     r13, 123
	add     r13, r15
	mov     qword [r12], r13
	mov     r13, 1
	shl	r13, 3
	mov	r11, 0
	shl	r11, 3
	add	r11, qword [rbp-24]
	add     r13, qword [r11]
	mov     r12, 0
	shl	r12, 3
	add     r12, qword [r13]
	mov     r13, 1
	shl	r13, 3
	add     r13, qword [r12]
	mov     r12, 0
	shl	r12, 3
	add     r12, qword [r13]
	mov     r13, 1
	shl	r13, 3
	add     r13, qword [r12]
	mov     r12, 0
	shl	r12, 3
	add     r12, qword [r13]
	mov     r13, 1
	shl	r13, 3
	add     r13, qword [r12]
	mov     r12, 0
	shl	r12, 3
	add     r12, qword [r13]
	mov     r13, 1
	shl	r13, 3
	add     r13, qword [r12]
	add     r14, qword [r13]
for_step23:
	mov     r13, r15
	add     r15, 1
	jmp    for_cond23
for_end23:
	mov     rdi, r14
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    toString
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	mov     r15, rax
	mov     rdi, r15
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    println
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	mov     r15, rax
	mov     r15, 1
for_cond30:
	cmp     r15, 1000000
	jle     for_body30
	jnle     for_end30
for_body30:
	add     r14, 8
for_step30:
	mov     r13, r15
	add     r15, 1
	jmp    for_cond30
for_end30:
	mov     rdi, r14
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    toString
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	mov     r15, rax
	mov     rdi, r15
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    println
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	mov     r15, rax
	mov     r15, 1
for_cond217:
	cmp     r15, 200000000
	jle     for_body217
	jnle     for_end217
for_body217:
for_step217:
	mov     r14, r15
	add     r15, 1
	jmp    for_cond217
for_end217:
	jmp    A.Optimizer.__end__
A.Optimizer.__end__:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	leave
	ret
restore:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 48
	push     rbp
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
restore.__begin__:
	mov     r14, 1
for_cond220:
	cmp     r14, qword [__global__n]
	jle     for_body220
	jnle     for_end220
for_body220:
	mov	r11, r14
	shl	r11, 3
	add	r11, qword [__global__a]
	mov	rbx, r14
	shl	rbx, 3
	add	rbx, qword [__global__bak]
	mov     rax, qword [rbx]
	mov     qword [r11], rax
for_step220:
	mov     r15, r14
	add     r14, 1
	jmp    for_cond220
for_end220:
	jmp    restore.__end__
restore.__end__:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	leave
	ret
quicksort:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 376
	mov     qword [rbp-8], rdi
	mov     qword [rbp-16], rsi
	push     rbp
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
quicksort.__begin__:
	mov     rax, 0
	mov     qword [rbp-32], rax
	mov	rbx, qword [rbp-8]
	shl	rbx, 3
	add	rbx, qword [__global__a]
	mov     rax, qword [rbx]
	mov     qword [rbp-48], rax
	mov     rax, 0
	mov     qword [rbp-64], rax
	mov     r13, 0
	mov     r15, qword [rbp-8]
	add     r15, 1
	mov     r14, r15
for_cond228:
	cmp     r14, qword [rbp-16]
	jl     for_body228
	jnl     for_end228
for_body228:
	mov     r15, qword [rbp-32]
	mov     rax, qword [rbp-32]
	add     rax, 1
	mov     qword [rbp-32], rax
	mov	r10, r14
	shl	r10, 3
	add	r10, qword [__global__a]
	mov     rcx, qword [r10]
	cmp     rcx, qword [rbp-48]
	jl     if_then232
	jnl     if_else232
if_then232:
	mov     r15, qword [rbp-64]
	mov     rax, qword [rbp-64]
	add     rax, 1
	mov     qword [rbp-64], rax
	mov	r11, r15
	shl	r11, 3
	add	r11, qword [__global__a_left]
	mov	rbx, r14
	shl	rbx, 3
	add	rbx, qword [__global__a]
	mov     rax, qword [rbx]
	mov     qword [r11], rax
	jmp    if_end232
if_else232:
	mov     r15, r13
	add     r13, 1
	mov	r11, r15
	shl	r11, 3
	add	r11, qword [__global__a_right]
	mov	rbx, r14
	shl	rbx, 3
	add	rbx, qword [__global__a]
	mov     rax, qword [rbx]
	mov     qword [r11], rax
if_end232:
for_step228:
	mov     r15, r14
	add     r14, 1
	jmp    for_cond228
for_end228:
	mov     r15, qword [rbp-8]
	mov     r14, 0
for_cond237:
	cmp     r14, qword [rbp-64]
	jl     for_body237
	jnl     for_end237
for_body237:
	mov     r12, r15
	add     r15, 1
	mov	r11, r12
	shl	r11, 3
	add	r11, qword [__global__a]
	mov	rbx, r14
	shl	rbx, 3
	add	rbx, qword [__global__a_left]
	mov     rax, qword [rbx]
	mov     qword [r11], rax
for_step237:
	mov     r12, r14
	add     r14, 1
	jmp    for_cond237
for_end237:
	mov     r14, r15
	add     r15, 1
	mov	r11, r14
	shl	r11, 3
	add	r11, qword [__global__a]
	mov     rax, qword [rbp-48]
	mov     qword [r11], rax
	mov     r14, 0
for_cond242:
	cmp     r14, r13
	jl     for_body242
	jnl     for_end242
for_body242:
	mov     r12, r15
	add     r15, 1
	mov	r11, r12
	shl	r11, 3
	add	r11, qword [__global__a]
	mov	rbx, r14
	shl	rbx, 3
	add	rbx, qword [__global__a_right]
	mov     rax, qword [rbx]
	mov     qword [r11], rax
for_step242:
	mov     r12, r14
	add     r14, 1
	jmp    for_cond242
for_end242:
	cmp     qword [rbp-64], 1
	jg     if_then246
	jng     if_end246
if_then246:
	mov     r15, qword [rbp-8]
	add     r15, qword [rbp-64]
	mov     rsi, r15
	mov     rdi, qword [rbp-8]
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    quicksort
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	mov     r15, rax
	mov     r14, qword [rbp-32]
	add     r14, r15
	mov     qword [rbp-32], r14
	jmp    if_end246
if_end246:
	cmp     r13, 1
	jg     if_then251
	jng     if_end251
if_then251:
	mov     r15, qword [rbp-16]
	sub     r15, r13
	mov     rsi, qword [rbp-16]
	mov     rdi, r15
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    quicksort
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	mov     r15, rax
	mov     r14, qword [rbp-32]
	add     r14, r15
	mov     qword [rbp-32], r14
	jmp    if_end251
if_end251:
	mov     rax, qword [rbp-32]
	jmp    quicksort.__end__
	jmp    quicksort.__end__
quicksort.__end__:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	leave
	ret
calc:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 208
	push     rbp
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
calc.__begin__:
	mov     r12, 1
for_cond256:
	cmp     r12, qword [__global__n]
	jle     for_body256
	jnle     for_end256
for_body256:
	mov     r15, r12
	sub     r15, 1
	mov	r11, r12
	shl	r11, 3
	add	r11, qword [__global__a_left]
	mov     qword [r11], r15
	mov     r15, r12
	add     r15, 1
	mov	r11, r12
	shl	r11, 3
	add	r11, qword [__global__a_right]
	mov     qword [r11], r15
for_step256:
	mov     r15, r12
	add     r12, 1
	jmp    for_cond256
for_end256:
	mov     r13, 0
	mov     r12, qword [__global__n]
for_cond264:
	cmp     r12, 1
	jge     for_body264
	jl     for_end264
for_body264:
	mov	rbx, r12
	shl	rbx, 3
	add	rbx, qword [__global__a]
	mov     r15, qword [rbx]
	shl	r15, 3
	add     r15, qword [__global__a_left]
	mov     r14, qword [r15]
	mov	rbx, r12
	shl	rbx, 3
	add	rbx, qword [__global__a]
	mov     r15, qword [rbx]
	shl	r15, 3
	add     r15, qword [__global__a_right]
	mov     r15, qword [r15]
	mov	r11, r14
	shl	r11, 3
	add	r11, qword [__global__a_right]
	mov     qword [r11], r15
	mov	r11, r15
	shl	r11, 3
	add	r11, qword [__global__a_left]
	mov     qword [r11], r14
	add     r13, r15
	mov     r15, r13
	sub     r15, r14
	sub     r15, 2
	mov     r13, r15
for_step264:
	mov     r15, r12
	sub     r12, 1
	jmp    for_cond264
for_end264:
	mov     rax, r13
	jmp    calc.__end__
	jmp    calc.__end__
calc.__end__:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	leave
	ret
mergesort:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 464
	mov     qword [rbp-8], rdi
	mov     qword [rbp-16], rsi
	push     rbp
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
mergesort.__begin__:
	mov     r15, qword [rbp-8]
	add     r15, 1
	cmp     r15, qword [rbp-16]
	je     if_then275
	jne     if_end275
if_then275:
	mov     rax, 0
	jmp    mergesort.__end__
	jmp    if_end275
if_end275:
	mov     r15, qword [rbp-8]
	add     r15, qword [rbp-16]
	shr	r15, 1
	mov     r14, r15
	mov     rax, 0
	mov     qword [rbp-80], rax
	mov     rsi, r14
	mov     rdi, qword [rbp-8]
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    mergesort
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	mov     r15, rax
	mov     r13, qword [rbp-80]
	add     r13, r15
	mov     qword [rbp-80], r13
	mov     rsi, qword [rbp-16]
	mov     rdi, r14
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    mergesort
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	mov     r15, rax
	mov     r13, qword [rbp-80]
	add     r13, r15
	mov     qword [rbp-80], r13
	mov     rax, 0
	mov     qword [rbp-152], rax
	mov     rax, 0
	mov     qword [rbp-168], rax
	mov     r15, qword [rbp-8]
for_cond288:
	cmp     r15, r14
	jl     for_body288
	jnl     for_end288
for_body288:
	mov     r13, qword [rbp-152]
	mov     rax, qword [rbp-152]
	add     rax, 1
	mov     qword [rbp-152], rax
	mov	r11, r13
	shl	r11, 3
	add	r11, qword [__global__a_left]
	mov	rbx, r15
	shl	rbx, 3
	add	rbx, qword [__global__a]
	mov     rax, qword [rbx]
	mov     qword [r11], rax
for_step288:
	mov     r13, r15
	add     r15, 1
	jmp    for_cond288
for_end288:
	mov     r15, r14
for_cond292:
	cmp     r15, qword [rbp-16]
	jl     for_body292
	jnl     for_end292
for_body292:
	mov     r14, qword [rbp-168]
	mov     rax, qword [rbp-168]
	add     rax, 1
	mov     qword [rbp-168], rax
	mov	r11, r14
	shl	r11, 3
	add	r11, qword [__global__a_right]
	mov	rbx, r15
	shl	rbx, 3
	add	rbx, qword [__global__a]
	mov     rax, qword [rbx]
	mov     qword [r11], rax
for_step292:
	mov     r14, r15
	add     r15, 1
	jmp    for_cond292
for_end292:
	mov     rax, 0
	mov     qword [rbp-272], rax
	mov     r14, 0
	mov     r15, qword [rbp-8]
while_cond299:
	mov     rcx, qword [rbp-272]
	cmp     rcx, qword [rbp-152]
	jl     rhs__begin__299
	jnl     while_end299
rhs__begin__299:
	cmp     r14, qword [rbp-168]
	jl     while_body299
	jnl     while_end299
while_body299:
	mov     r13, qword [rbp-80]
	mov     rax, qword [rbp-80]
	add     rax, 1
	mov     qword [rbp-80], rax
	mov	r10, qword [rbp-272]
	shl	r10, 3
	add	r10, qword [__global__a_left]
	mov	r11, r14
	shl	r11, 3
	add	r11, qword [__global__a_right]
	mov     rcx, qword [r10]
	cmp     rcx, qword [r11]
	jl     if_then302
	jnl     if_else302
if_then302:
	mov     r12, r15
	add     r15, 1
	mov     r13, qword [rbp-272]
	mov     rax, qword [rbp-272]
	add     rax, 1
	mov     qword [rbp-272], rax
	mov	r11, r12
	shl	r11, 3
	add	r11, qword [__global__a]
	mov	rbx, r13
	shl	rbx, 3
	add	rbx, qword [__global__a_left]
	mov     rax, qword [rbx]
	mov     qword [r11], rax
	jmp    if_end302
if_else302:
	mov     r12, r15
	add     r15, 1
	mov     r13, r14
	add     r14, 1
	mov	r11, r12
	shl	r11, 3
	add	r11, qword [__global__a]
	mov	rbx, r13
	shl	rbx, 3
	add	rbx, qword [__global__a_right]
	mov     rax, qword [rbx]
	mov     qword [r11], rax
if_end302:
	jmp    while_cond299
while_end299:
while_cond306:
	mov     rcx, qword [rbp-272]
	cmp     rcx, qword [rbp-152]
	jl     while_body306
	jnl     while_end306
while_body306:
	mov     r12, r15
	add     r15, 1
	mov     r13, qword [rbp-272]
	mov     rax, qword [rbp-272]
	add     rax, 1
	mov     qword [rbp-272], rax
	mov	r11, r12
	shl	r11, 3
	add	r11, qword [__global__a]
	mov	rbx, r13
	shl	rbx, 3
	add	rbx, qword [__global__a_left]
	mov     rax, qword [rbx]
	mov     qword [r11], rax
	jmp    while_cond306
while_end306:
while_cond308:
	cmp     r14, qword [rbp-168]
	jl     while_body308
	jnl     while_end308
while_body308:
	mov     r12, r15
	add     r15, 1
	mov     r13, r14
	add     r14, 1
	mov	r11, r12
	shl	r11, 3
	add	r11, qword [__global__a]
	mov	rbx, r13
	shl	rbx, 3
	add	rbx, qword [__global__a_right]
	mov     rax, qword [rbx]
	mov     qword [r11], rax
	jmp    while_cond308
while_end308:
	mov     rax, qword [rbp-80]
	jmp    mergesort.__end__
	jmp    mergesort.__end__
mergesort.__end__:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	leave
	ret
heapsort:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 432
	push     rbp
	push     rbx
	push     r12
	push     r13
	push     r14
	push     r15
heapsort.__begin__:
	mov     rax, 0
	mov     qword [rbp-16], rax
	mov     rax, 1
	mov     qword [rbp-32], rax
for_cond311:
	mov     rcx, qword [rbp-32]
	cmp     rcx, qword [__global__n]
	jle     for_body311
	jnle     for_end311
for_body311:
	mov	r11, qword [rbp-32]
	shl	r11, 3
	add	r11, qword [__global__heap]
	mov	rbx, qword [rbp-32]
	shl	rbx, 3
	add	rbx, qword [__global__a]
	mov     rax, qword [rbx]
	mov     qword [r11], rax
	mov     r14, qword [rbp-32]
while_cond316:
	cmp     r14, 1
	jne     while_body316
	je     while_end316
while_body316:
	mov     r15, qword [rbp-16]
	mov     rax, qword [rbp-16]
	add     rax, 1
	mov     qword [rbp-16], rax
	mov     r15, r14
	shr	r15, 1
	mov	r10, r14
	shl	r10, 3
	add	r10, qword [__global__heap]
	mov	r11, r15
	shl	r11, 3
	add	r11, qword [__global__heap]
	mov     rcx, qword [r10]
	cmp     rcx, qword [r11]
	jg     if_then317
	jng     if_end317
if_then317:
	jmp    while_end316
	jmp    if_end317
if_end317:
	mov	rbx, r14
	shl	rbx, 3
	add	rbx, qword [__global__heap]
	mov     r15, qword [rbx]
	mov     r13, r14
	shr	r13, 1
	mov	r11, r14
	shl	r11, 3
	add	r11, qword [__global__heap]
	mov	rbx, r13
	shl	rbx, 3
	add	rbx, qword [__global__heap]
	mov     rax, qword [rbx]
	mov     qword [r11], rax
	mov     r13, r14
	shr	r13, 1
	mov	r11, r13
	shl	r11, 3
	add	r11, qword [__global__heap]
	mov     qword [r11], r15
	mov     r15, r14
	shr	r15, 1
	mov     r14, r15
	jmp    while_cond316
while_end316:
for_step311:
	mov     r15, qword [rbp-32]
	mov     rax, qword [rbp-32]
	add     rax, 1
	mov     qword [rbp-32], rax
	jmp    for_cond311
for_end311:
	mov     rax, qword [__global__n]
	mov     qword [rbp-184], rax
	mov     rax, 1
	mov     qword [rbp-32], rax
for_cond328:
	mov     rcx, qword [rbp-32]
	cmp     rcx, qword [__global__n]
	jle     for_body328
	jnle     for_end328
for_body328:
	mov	r11, qword [rbp-32]
	shl	r11, 3
	add	r11, qword [__global__a]
	mov	rbx, 1
	shl	rbx, 3
	add	rbx, qword [__global__heap]
	mov     rax, qword [rbx]
	mov     qword [r11], rax
	mov     r15, qword [rbp-184]
	mov     rax, qword [rbp-184]
	sub     rax, 1
	mov     qword [rbp-184], rax
	mov	r11, 1
	shl	r11, 3
	add	r11, qword [__global__heap]
	mov	rbx, r15
	shl	rbx, 3
	add	rbx, qword [__global__heap]
	mov     rax, qword [rbx]
	mov     qword [r11], rax
	mov     rax, 1
	mov     qword [rbp-240], rax
while_cond334:
	mov     r15, qword [rbp-240]
	shl	r15, 1
	cmp     r15, qword [rbp-184]
	jle     while_body334
	jnle     while_end334
while_body334:
	mov     r15, qword [rbp-240]
	shl	r15, 1
	mov     r12, r15
	mov     r15, r12
	add     r15, 1
	mov     r13, r15
	mov     r14, r12
	cmp     r13, qword [rbp-184]
	jle     if_then341
	jnle     if_end341
if_then341:
	mov     r15, qword [rbp-16]
	mov     rax, qword [rbp-16]
	add     rax, 1
	mov     qword [rbp-16], rax
	mov	r10, r13
	shl	r10, 3
	add	r10, qword [__global__heap]
	mov	r11, r12
	shl	r11, 3
	add	r11, qword [__global__heap]
	mov     rcx, qword [r10]
	cmp     rcx, qword [r11]
	jl     if_then343
	jnl     if_end343
if_then343:
	mov     r14, r13
	jmp    if_end343
if_end343:
	jmp    if_end341
if_end341:
	mov     r15, qword [rbp-16]
	mov     rax, qword [rbp-16]
	add     rax, 1
	mov     qword [rbp-16], rax
	mov	r10, qword [rbp-240]
	shl	r10, 3
	add	r10, qword [__global__heap]
	mov	r11, r14
	shl	r11, 3
	add	r11, qword [__global__heap]
	mov     rcx, qword [r10]
	cmp     rcx, qword [r11]
	jl     if_then346
	jnl     if_end346
if_then346:
	jmp    while_end334
	jmp    if_end346
if_end346:
	mov	rbx, qword [rbp-240]
	shl	rbx, 3
	add	rbx, qword [__global__heap]
	mov     r15, qword [rbx]
	mov	r11, qword [rbp-240]
	shl	r11, 3
	add	r11, qword [__global__heap]
	mov	rbx, r14
	shl	rbx, 3
	add	rbx, qword [__global__heap]
	mov     rax, qword [rbx]
	mov     qword [r11], rax
	mov	r11, r14
	shl	r11, 3
	add	r11, qword [__global__heap]
	mov     qword [r11], r15
	mov     r15, qword [rbp-240]
	mov     qword [rbp-240], r14
	mov     r14, r15
	jmp    while_cond334
while_end334:
for_step328:
	mov     r15, qword [rbp-32]
	mov     rax, qword [rbp-32]
	add     rax, 1
	mov     qword [rbp-32], rax
	jmp    for_cond328
for_end328:
	mov     rax, qword [rbp-16]
	jmp    heapsort.__end__
	jmp    heapsort.__end__
heapsort.__end__:
	pop     r15
	pop     r14
	pop     r13
	pop     r12
	pop     rbx
	leave
	ret
main:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 592
main.__begin__:
	mov     rax, 100000
	mov     qword [__global__N], rax
	mov     r15, 0
	mov     r15, qword [__global__N]
	mov     rax, r15
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    malloc
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	add     rax, 8
	mov     r15, rax
	mov     rax, qword [__global__N]
	mov     qword [r15-8], rax
	mov     qword [__global__a], r15
	mov     r15, 0
	mov     r15, qword [__global__N]
	mov     rax, r15
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    malloc
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	add     rax, 8
	mov     r15, rax
	mov     rax, qword [__global__N]
	mov     qword [r15-8], rax
	mov     qword [__global__bak], r15
	mov     r15, 0
	mov     r15, qword [__global__N]
	mov     rax, r15
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    malloc
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	add     rax, 8
	mov     r15, rax
	mov     rax, qword [__global__N]
	mov     qword [r15-8], rax
	mov     qword [__global__a_left], r15
	mov     r15, 0
	mov     r15, qword [__global__N]
	mov     rax, r15
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    malloc
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	add     rax, 8
	mov     r15, rax
	mov     rax, qword [__global__N]
	mov     qword [r15-8], rax
	mov     qword [__global__a_right], r15
	mov     r15, 0
	mov     r15, qword [__global__N]
	mov     rax, r15
	add     rax, 1
	shl	rax, 3
	mov     rdi, rax
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    malloc
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	add     rax, 8
	mov     r15, rax
	mov     rax, qword [__global__N]
	mov     qword [r15-8], rax
	mov     qword [__global__heap], r15
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    getInt
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	mov     r15, rax
	mov     qword [__global__n], r15
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    getInt
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	mov     r15, rax
	mov     r14, r15
	mov     r15, 1
for_cond367:
	cmp     r15, qword [__global__n]
	jle     for_body367
	jnle     for_end367
for_body367:
	mov	r11, r15
	shl	r11, 3
	add	r11, qword [__global__a]
	mov     qword [r11], r15
	cmp     r15, r14
	jle     if_then371
	jnle     if_end371
if_then371:
	mov     r13, r14
	add     r13, 1
	sub     r13, r15
	mov	r11, r15
	shl	r11, 3
	add	r11, qword [__global__a]
	mov     qword [r11], r13
	jmp    if_end371
if_end371:
	mov	r11, r15
	shl	r11, 3
	add	r11, qword [__global__bak]
	mov	rbx, r15
	shl	rbx, 3
	add	rbx, qword [__global__a]
	mov     rax, qword [rbx]
	mov     qword [r11], rax
for_step367:
	mov     r13, r15
	add     r15, 1
	jmp    for_cond367
for_end367:
	mov     r15, qword [__global__n]
	add     r15, 1
	mov     rsi, r15
	mov     rdi, 1
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    quicksort
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	mov     r15, rax
	mov     r12, r15
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    restore
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	mov     r15, rax
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    calc
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	mov     r15, rax
	mov     r13, r15
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    restore
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	mov     r15, rax
	mov     r15, qword [__global__n]
	add     r15, 1
	mov     rsi, r15
	mov     rdi, 1
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    mergesort
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	mov     r15, rax
	mov     r14, r15
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    restore
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	mov     r15, rax
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    heapsort
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	mov     r15, rax
	mov     rdi, r12
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    toString
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	mov     r12, rax
	mov     rdi, r12
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    println
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	mov     r12, rax
	mov     rdi, r13
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    toString
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	mov     r13, rax
	mov     rdi, r13
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    println
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	mov     r13, rax
	mov     rdi, r14
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    toString
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	mov     r14, rax
	mov     rdi, r14
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    println
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	mov     r14, rax
	mov     rdi, r15
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    toString
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	mov     r15, rax
	mov     rdi, r15
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    println
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	mov     r15, rax
	mov     rdi, 8
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    malloc
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	mov     r15, rax
	mov     rdi, r15
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    A.A
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	mov     rdi, r15
	push     r10
	push     r11
	push     rdi
	push     rsi
	push     rdx
	push     rcx
	call    A.Optimizer
	pop     rcx
	pop     rdx
	pop     rsi
	pop     rdi
	pop     r11
	pop     r10
	mov     r15, rax
	mov     rax, 0
	jmp    main.__end__
	jmp    main.__end__
main.__end__:
	leave
	ret
toString:
	push     rbp
	mov      rbp,rsp
	mov      rdx,rdi
	mov      rax,0
	mov      rdi,stringbuffer
	mov      rsi,format1
	call     sprintf
	mov      rdi,stringbuffer
	call     transtring
	mov      rsp,rbp
	pop      rbp
	ret
println:
	call puts
	ret

array.size:
	mov	rax, qword [rdi - 8]
	ret

string.add:
	push rbp
	mov rbp,rsp
	push rsi
	mov rsi,rdi
	mov rdi,stringbuffer
	mov rdx,[rsi-8]
	push rdx
	call memcpy
	pop rdi
	pop rsi
	add rdi,stringbuffer
	mov rdx,[rsi-8]
	add rdx,1
	call memcpy
	mov rdi,stringbuffer
	call transtring
	mov rsp,rbp
	pop rbp
	ret
getInt:
	push rbp
	mov rbp,rsp
	mov rax,0
	mov rdi,format1
	mov rsi,intbuffer
	call scanf
	mov rax,[intbuffer]
	mov rsp,rbp
	pop rbp
	ret
string.length:
	push    rbp
	mov     rbp, rsp
	mov     qword [rbp-18H], rdi
	mov     dword [rbp-4H], 0
	jmp     Llen_002
Llen_001:  add     dword [rbp-4H], 1
Llen_002:  mov     eax, dword [rbp-4H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jnz     Llen_001
	mov     eax, dword [rbp-4H]
	pop     rbp
	ret
string.ord:
	push    rbp
	mov     rbp, rsp
	mov     qword [rbp-18H], rdi
	mov     dword [rbp-1CH], esi
	mov     eax, dword [rbp-1CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	movsx   eax, al
	mov     dword [rbp-4H], eax
	mov     eax, dword [rbp-4H]
	pop     rbp
	ret
print:
	push rbp
	mov rbp,rsp
	mov rax,0
	mov rsi,rdi
	mov rdi,format2
	call printf
	mov rsp,rbp
	pop rbp
	ret
transtring:

	push rbp
	mov rbp,rsp
	call strlen
	push rdi
	mov rdi,rax
	push rdi
	add rdi,9
	call malloc
	pop rdi
	mov [rax],rdi
	add rax,8
	mov rdx,rdi
	add rdx,1
	mov rdi,rax
	pop rsi
	sub rsp,8
	push rax
	call memcpy
	pop rax
	mov rsp,rbp
	pop rbp
	ret

getString:

	push rbp
	mov rbp,rsp
	mov rax,0
	mov rdi,format2
	mov rsi,stringbuffer
	call scanf
	mov rdi,stringbuffer
	call transtring
	mov rsp,rbp
	pop rbp
	ret

string.substring:
	push rbp
	mov rbp,rsp
	push rdi
	push rsi
	mov rdi,rdx
	sub rdi,rsi
	add rdi,1
	push rdi
	add rdi,9
	call malloc
	pop rdx
	mov [rax],rdx
	add rax,8
	pop rsi
	pop rdi
	add rsi,rdi
	mov rdi,rax
	push rdx
	push rax
	call memcpy
	pop rax
	pop rdx
	mov qword[rax+rdx],0
	mov rsp,rbp
	pop rbp
	ret

string.parseInt:
	push    rbp
	mov     rbp, rsp
	sub     rsp, 32
	mov     qword [rbp-18H], rdi
	mov     edi, 256
	call    malloc
	mov     qword [rbp-8H], rax
	mov     dword [rbp-10H], 0
	mov     dword [rbp-0CH], 0
	jmp     Lpar_002
Lpar_001:  add     dword [rbp-10H], 1
Lpar_002:  mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Lpar_004
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Lpar_001
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Lpar_001
	jmp     Lpar_004
Lpar_003:  mov     edx, dword [rbp-0CH]
	mov     eax, edx
	shl     eax, 2
	add     eax, edx
	add     eax, eax
	mov     ecx, eax
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	movsx   eax, al
	add     eax, ecx
	sub     eax, 48
	mov     dword [rbp-0CH], eax
	add     dword [rbp-10H], 1
Lpar_004:  mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 47
	jle     Lpar_005
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jle     Lpar_003
Lpar_005:  mov     eax, dword [rbp-0CH]
	leave
	ret
	string.eq:
	push    rbp
	mov     rbp, rsp
	mov     qword [rbp-18H], rdi
	mov     qword [rbp-20H], rsi
	mov     dword [rbp-0CH], 0
	mov     dword [rbp-8H], 0
	jmp     Leq_002
Leq_001:  add     dword [rbp-0CH], 1
Leq_002:  mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Leq_004
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Leq_001
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Leq_001
	jmp     Leq_004
Leq_003:  add     dword [rbp-8H], 1
Leq_004:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Leq_005
	mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Leq_003
	mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Leq_003
Leq_005:  mov     eax, dword [rbp-0CH]
	cmp     eax, dword [rbp-8H]
	jz      Leq_006
	mov     eax, 0
	jmp     Leq_010
Leq_006:  mov     dword [rbp-4H], 0
	mov     dword [rbp-4H], 0
	jmp     Leq_009
Leq_007:  mov     eax, dword [rbp-4H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-4H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jz      Leq_008
	mov     eax, 0
	jmp     Leq_010
Leq_008:  add     dword [rbp-4H], 1
Leq_009:  mov     eax, dword [rbp-4H]
	cmp     eax, dword [rbp-0CH]
	jl      Leq_007
	mov     eax, 1
Leq_010:  pop     rbp
	ret
string.lt:
	push    rbp
	mov     rbp, rsp
	mov     qword [rbp-18H], rdi
	mov     qword [rbp-20H], rsi
	mov     dword [rbp-10H], 0
	mov     dword [rbp-0CH], 0
	jmp     Ll_012
Ll_011:  add     dword [rbp-10H], 1
Ll_012:  mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Ll_014
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Ll_011
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Ll_011
	jmp     Ll_014
Ll_013:  add     dword [rbp-0CH], 1
Ll_014:  mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Ll_015
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Ll_013
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Ll_013
Ll_015:  mov     eax, dword [rbp-0CH]
	cmp     dword [rbp-10H], eax
	cmovle  eax, dword [rbp-10H]
	mov     dword [rbp-4H], eax
	mov     dword [rbp-8H], 0
	mov     dword [rbp-8H], 0
	jmp     Ll_019
Ll_016:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-8H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jge     Ll_017
	mov     eax, 1
	jmp     Ll_021
Ll_017:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-8H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jle     Ll_018
	mov     eax, 0
	jmp     Ll_021
Ll_018:  add     dword [rbp-8H], 1
Ll_019:  mov     eax, dword [rbp-8H]
	cmp     eax, dword [rbp-4H]
	jl      Ll_016
	mov     eax, dword [rbp-10H]
	cmp     eax, dword [rbp-0CH]
	jl      Ll_020
	mov     eax, 0
	jmp     Ll_021
Ll_020:  mov     eax, 1
Ll_021:  pop     rbp
	ret
string.gt:
	push    rbp
	mov     rbp, rsp
	mov     qword [rbp-18H], rdi
	mov     qword [rbp-20H], rsi
	mov     dword [rbp-10H], 0
	mov     dword [rbp-0CH], 0
	jmp     Lg_023
Lg_022:  add     dword [rbp-10H], 1
Lg_023:  mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Lg_025
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Lg_022
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Lg_022
	jmp     Lg_025
Lg_024:  add     dword [rbp-0CH], 1
Lg_025:  mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Lg_026
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Lg_024
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Lg_024
Lg_026:  mov     eax, dword [rbp-0CH]
	cmp     dword [rbp-10H], eax
	cmovle  eax, dword [rbp-10H]
	mov     dword [rbp-4H], eax
	mov     dword [rbp-8H], 0
	mov     dword [rbp-8H], 0
	jmp     Lg_030
Lg_027:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-8H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jle     Lg_028
	mov     eax, 1
	jmp     Lg_032
Lg_028:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-8H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jge     Lg_029
	mov     eax, 0
	jmp     Lg_032
Lg_029:  add     dword [rbp-8H], 1
Lg_030:  mov     eax, dword [rbp-8H]
	cmp     eax, dword [rbp-4H]
	jl      Lg_027
	mov     eax, dword [rbp-10H]
	cmp     eax, dword [rbp-0CH]
	jg      Lg_031
	mov     eax, 0
	jmp     Lg_032
Lg_031:  mov     eax, 1
Lg_032:  pop     rbp
	ret
	string.le:
	push    rbp
	mov     rbp, rsp
	mov     qword [rbp-18H], rdi
	mov     qword [rbp-20H], rsi
	mov     dword [rbp-10H], 0
	mov     dword [rbp-0CH], 0
	jmp     Llege_002
Llege_001:  add     dword [rbp-10H], 1
Llege_002:  mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Llege_004
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Llege_001
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Llege_001
	jmp     Llege_004
Llege_003:  add     dword [rbp-0CH], 1
Llege_004:  mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Llege_005
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Llege_003
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Llege_003
Llege_005:  mov     eax, dword [rbp-0CH]
	cmp     dword [rbp-10H], eax
	cmovle  eax, dword [rbp-10H]
	mov     dword [rbp-4H], eax
	mov     dword [rbp-8H], 0
	mov     dword [rbp-8H], 0
	jmp     Llege_009
Llege_006:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-8H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jge     Llege_007
	mov     eax, 1
	jmp     Llege_011
Llege_007:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-8H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jle     Llege_008
	mov     eax, 0
	jmp     Llege_011
Llege_008:  add     dword [rbp-8H], 1
Llege_009:  mov     eax, dword [rbp-8H]
	cmp     eax, dword [rbp-4H]
	jl      Llege_006
	mov     eax, dword [rbp-10H]
	cmp     eax, dword [rbp-0CH]
	jle     Llege_010
	mov     eax, 0
	jmp     Llege_011
	Llege_010:  mov     eax, 1
	Llege_011:  pop     rbp
	ret
	string.ge:
	push    rbp
	mov     rbp, rsp
	mov     qword [rbp-18H], rdi
	mov     qword [rbp-20H], rsi
	mov     dword [rbp-10H], 0
	mov     dword [rbp-0CH], 0
	jmp     Llege_013
Llege_012:  add     dword [rbp-10H], 1
Llege_013:  mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Llege_015
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Llege_012
	mov     eax, dword [rbp-10H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Llege_012
	jmp     Llege_015
Llege_014:  add     dword [rbp-0CH], 1
Llege_015:  mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	jz      Llege_016
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	test    al, al
	js      Llege_014
	mov     eax, dword [rbp-0CH]
	movsxd  rdx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rdx
	movzx   eax, byte [rax]
	cmp     al, 57
	jg      Llege_014
Llege_016:  mov     eax, dword [rbp-0CH]
	cmp     dword [rbp-10H], eax
	cmovle  eax, dword [rbp-10H]
	mov     dword [rbp-4H], eax
	mov     dword [rbp-8H], 0
	mov     dword [rbp-8H], 0
	jmp     Llege_020
Llege_017:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-8H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jle     Llege_018
	mov     eax, 1
	jmp     Llege_022
Llege_018:  mov     eax, dword [rbp-8H]
	movsxd  rdx, eax
	mov     rax, qword [rbp-18H]
	add     rax, rdx
	movzx   edx, byte [rax]
	mov     eax, dword [rbp-8H]
	movsxd  rcx, eax
	mov     rax, qword [rbp-20H]
	add     rax, rcx
	movzx   eax, byte [rax]
	cmp     dl, al
	jge     Llege_019
	mov     eax, 0
	jmp     Llege_022
Llege_019:  add     dword [rbp-8H], 1
Llege_020:  mov     eax, dword [rbp-8H]
	cmp     eax, dword [rbp-4H]
	jl      Llege_017
	mov     eax, dword [rbp-10H]
	cmp     eax, dword [rbp-0CH]
	jge     Llege_021
	mov     eax, 0
	jmp     Llege_022
Llege_021:  mov     eax, 1
Llege_022:  pop     rbp
	ret
